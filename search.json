[
  {
    "objectID": "about/aboutimagescredit.html",
    "href": "about/aboutimagescredit.html",
    "title": "About images credit",
    "section": "",
    "text": "Images list\n\nOOP principles: www.nerd.vision1\nJava Programming Tutorial Object-oriented Programming (OOP) Basics: www3.ntu.edu.sg2\nSingleton Design Pattern: Singleton Design Pattern3\nGet Java for desktop applications: Java / Download Java / What is Java technology and why do I need it?4\nDriving Augmented Intelligence Test Driven Development (TDD) Tools and Agile Process5\n\nHow to write notes with .qmd Quarto Markdown\n\n\n\n\n\nFootnotes\n\n\nrandom web, just crediting the image↩︎\nvery useful and recommended resource↩︎\nrandom web, just crediting the image↩︎\ninteresting web↩︎\ninteresting web↩︎"
  },
  {
    "objectID": "about/aboutlearning.html",
    "href": "about/aboutlearning.html",
    "title": "About learning",
    "section": "",
    "text": "Take notes with pen and paper and have effective note-taking skills\n\n\n\n\n\nSpeak, debate, create emotions, remember, memorize. Engage the learning, show it is important for you\n\n\n\n\n\nEmbrace discomfort to make connections: study some topics at once upon a distributed practice (use the time space among stages) with minor changes everytime\n\n\n\n\n\nTeach what you learn to others. Do it, now."
  },
  {
    "objectID": "about/aboutlearning.html#jim-kwik-learn-anything-faster",
    "href": "about/aboutlearning.html#jim-kwik-learn-anything-faster",
    "title": "About learning",
    "section": "Jim Kwik: learn anything faster",
    "text": "Jim Kwik: learn anything faster\nTo learn anything faster, just remember FAST\n\nThe F in Fast stands for Forget\n\nIf you want to speed up ‘kwik brain,’ you must temporarily forget three things.\nForget what you already know about the subject. A lot of people don’t learn faster because they feel like they already know the information. But your mind is like a parachute—it only works when it’s open.\nForget about anything that’s not urgent and important. You can’t multitask. If your brain is thinking about 4 different things, you’re not fully present and you won’t learn ’kwik’ly.\nForget your limitations. These are beliefs like your memory isn’t good, or you’re a slow reader, or you don’t have the right education to learn. But if you fight for your limitations, you get to keep them. Your memory isn’t fixed, and it is possible to remember hundreds of words and numbers the way I do onstage.\n\n\n\nThe A in FAST stands for Active\n\nIn school, we were taught to learn by consuming information quietly. But you don’t learn by being lectured to. You learn by creating information and being active in the process.\nLearning is NOT a spectator sport.\nHow can you be more active in your learning?\nAsk questions.\nTake notes.\nThe more active you are, the more you will learn.\n\n\n\nThe S in FAST stands for State\n\nYour state is a snapshot of your mood – the mood of your mind and your body. It’s the emotional well-being that you feel in that exact moment.\nInformation combined with emotion becomes a long-term memory.\nMany of us don’t remember what we learned in school because the umbrella emotion for most people in school was boredom.\nYou are the only person in control of your state.\nHow can you improve your state?\nChange your posture or your body or breathing.\nSit or stand the way you would if you were totally energized.\nThink about how you’ll benefit from the information.\nAll learning is state-dependent. Choose states of joy, fascination, and curiosity.\nSell your cleverness for bewilderment – Rumi.\n\n\n\nThe T in FAST stands for Teach\n\nIf you want to cut your learning curve in half, learn with the intention of teaching it to somebody else.\nIf you had to give a presentation on what you’re learning today, you would learn it differently. You would pay closer attention. You would take more detailed notes. You would ask better questions.\nWhen I teach something, I get to learn it twice.\nPeople often say that those who can’t do teach. But I never saw that as a negative. I always thought, wow, if I can’t do something, I can teach it, and then I can do it."
  },
  {
    "objectID": "about/aboutme.html",
    "href": "about/aboutme.html",
    "title": "About me",
    "section": "",
    "text": "Hi, this is alberprofe speaking! My fields of expertise are … let’s OpenAI introduce them:\n\nA software architect is a person who is responsible for the overall design and architecture of a software system. They are responsible for creating a high-level design that defines the structure and behavior of the system, as well as for ensuring that the system meets the needs and requirements of the user or client.\n\n\nA team leader is a person who is responsible for leading and managing a team of individuals. They are responsible for setting goals and objectives for the team, as well as for providing guidance and support to team members. A team leader may also be responsible for coordinating the work of the team, monitoring progress, and providing feedback to team members.\n\n\nA professor is an individual who teaches at a college or university. They typically have advanced degrees in their field of expertise and are responsible for designing and delivering courses, conducting research, and providing academic guidance to students.\n\n\nAn entrepreneur is a person who starts and runs their own business. They are responsible for identifying a business opportunity, developing a business plan, and managing the day-to-day operations of the business. An entrepreneur is typically focused on growing the business and generating profits, and they may also be involved in product development, marketing, and other aspects of the business.\n\n\nThese four roles are all different and may be held by different individuals. A software architect is focused on the technical design and implementation of a software system, a team leader is focused on managing and coordinating the work of a team, a professor is focused on teaching and research in a particular field of study, and an entrepreneur is focused on starting and running a business.\n\n\n\n\nprofessor:  professor (albertprofe at gmail dot com)\nprofessional:  professinal (ayarza at inspiratgames dot com)\n\n\n\n\nhttps://www.linkedin.com/in/albert-yarza-demur/"
  },
  {
    "objectID": "about/aboutquestions.html",
    "href": "about/aboutquestions.html",
    "title": "About the Useful Questions",
    "section": "",
    "text": "Questions that begin with the words why, who, what, and how are necessary and paramount because they help to clarify information, to seek additional details, and to better understand a situation. Besides, they play a crucial role in facilitating communication and understanding.\nThese words are often used to ask open-ended questions, which are questions that cannot be answered with a simple yes or no. Asking open-ended questions allows for more in-depth conversation and debate and can help to uncover important information or insights.\nFor example,\n\nasking “Why did this happen?” can help to identify the underlying causes of a particular event,\nwhile asking “What are the consequences of this decision?” can help to anticipate and evaluate the potential impacts of a choice.\n\nOverall, asking why, who, what, and how can help to improve communication, to facilitate decision-making, and to deepen understanding.\n\n\n\n\n\nflowchart TD\n  A(Why: programming) --> |Very personal question\\n and it must be answered| B{Who: profiles}\n  B--> C(You love it) \n  B--> D(You need it)\n  C--> E(What: sylabus)\n  H[\"Here you need some\\n kind of guidence\"]--> |teacher?senior? \\nif not a 'picar pedra'| E(What: sylabus)\n  D--> E(What: sylabus)\n  E--> |The what is helpless\\n if you don't know the for| F(For What: skills)\n  F--> |The most second most importat step\\n after the why, the how\\n a bad how may destroy your why| G(How: \\nlearning techniques)"
  },
  {
    "objectID": "about/aboutthissite.html",
    "href": "about/aboutthissite.html",
    "title": "About this site",
    "section": "",
    "text": "This site has been done and been mantaining with four tools and several content sources:\n\n\n\nQuarto\nMarkdown\nGit / GitHub.com / Git Pages\nVisual Code IDE\n\n\n\n\n\nOpenAI Chat\nBooks, authors, websites or online resources are cited as detailed as possible (minimum Author, site and link)\nDocumentation of my own: albertprofe sites and repositories\n\nGitHub repository albertprofe\nWeb SCRUM\nWeb DevOps"
  },
  {
    "objectID": "about/aboutthissite.html#diagram",
    "href": "about/aboutthissite.html#diagram",
    "title": "About this site",
    "section": "Diagram",
    "text": "Diagram\n\n\n\nHow to create a website with Quarto engine, written in MarkDown and deployed/hosted/published by GitHub-pages\n\n\nGo to Markdown Lab1 to check the details"
  },
  {
    "objectID": "about/aboutthissite.html#tools-1",
    "href": "about/aboutthissite.html#tools-1",
    "title": "About this site",
    "section": "Tools",
    "text": "Tools\n\nBasic tools\nQuarto is an open-source scientific and technical publishing system built on Pandoc. To learn more about Quarto websites visit quarto.org.\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. It is commonly used on the web to format blog posts and other types of content.\nVisualCode is an integrated development environment (IDE) that is used to write and debug code.\nGitHub Pages is a service offered by the popular version control platform GitHub. It allows users to create and host websites using the files that are stored in their GitHub repositories. It can be used to create personal, organization, or project-based websites.\n\n\nGit\nGit is a version control system that is used for tracking changes to files, such as source code or documents. It is commonly used by software developers to manage their codebase, but it can also be used for other types of files.\n\nGit allows users to create a repository, which is a collection of files that are managed by Git. Each time a change is made to a file in the repository, Git records the change in a new version of the file. This allows users to easily undo changes, compare different versions of a file, and collaborate with others on the same files.\n\nGit also provides tools for managing and merging changes made by different users. This makes it possible for multiple people to work on the same files at the same time without overwriting each other’s changes.\nOverall, Git is a powerful and widely-used tool that is essential for anyone working on large or complex projects with multiple collaborators. It allows users to easily track, manage, and share changes to their files, making it easier to develop and maintain software projects."
  },
  {
    "objectID": "about/aboutthissite.html#install-tools",
    "href": "about/aboutthissite.html#install-tools",
    "title": "About this site",
    "section": "Install tools",
    "text": "Install tools\nIf you want to use VisualCode and GitHub together, you can follow these steps:\n\nInstall VisualCode on your computer.\nCreate a new project in VisualCode by selecting “File > New Project” from the menu.\nInitialize a Git repository in your project by opening the terminal in VisualCode and running the git init command.\nUse VisualCode to write and save your code files in the project directory.\nStage and commit your changes to the Git repository using the git add and git commit commands.\nCreate a new repository on GitHub and follow the instructions to push your local repository to the remote repository on GitHub.\n\nOnce your code is on GitHub, you can use GitHub Pages to create a website for your project. To do this, follow these steps:\n\nOpen the repository on GitHub and go to the “Settings” tab.\nScroll down to the “GitHub Pages” section and select the “master branch” as the source for your website.\nGitHub will automatically build and publish your website, and it will provide a URL where you can view it.\n\n\n\n\n\n\n\nBe careful: these instructions are just a general overview\n\n\n\n\n\nNote that these instructions are just a general overview of how to use VisualCode and GitHub together. There are many other features and options that you can use to customize your workflow. For more detailed information, you can consult the documentation for VisualCode and GitHub.\n\n\n\n\nMarkdown examples\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. It is commonly used on the web to format blog posts and other types of content.\nTo format text using Markdown, you use special characters and symbols to indicate the formatting that you want to apply. For example, to create a heading, you can use the # symbol followed by the text of the heading. To create a bullet list, you can use the - symbol at the beginning of each list item.\nHere is an example of how Markdown can be used to format a simple document, when this Markdown code is rendered, it will look like this::\n\nHeading 5\nThis is a paragraph of text. It can include italicized or bold text, and you can create links to other web pages.\n\nThis is a bullet list\nEach item in the list begins with a dash\nYou can nest lists by indenting the items\n\n\nThis is a blockquote To create a blockquote, you use the > symbol at the beginning of each line\n\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <div className=\"UserInfo\">\n        <img className=\"Avatar\"\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        />\n        <div className=\"UserInfo-name\">\n          {props.author.name}\n        </div>\n      </div>\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\nThere are many other features and options available in Markdown, and you can use it to format your text in a variety of ways. For more information, you can consult the documentation for the specific implementation of Markdown that you are using."
  },
  {
    "objectID": "about/aboutthissite.html#openai-chat",
    "href": "about/aboutthissite.html#openai-chat",
    "title": "About this site",
    "section": "OpenAI Chat",
    "text": "OpenAI Chat\n\nWhat are you?\n\n\nI am an AI assistant trained by OpenAI. I am not a human, but I am designed to answer questions and provide information on a wide range of topics. I do not have feelings, thoughts, or opinions of my own, and I exist solely to assist users in finding the information that they need. I am not affiliated with quarto.org or any other website or organization. I am a virtual entity that exists only in the digital realm.\n\n\nChatGPT\n\n\n\n\n\n\nChatGPT 3.5 is testing\n\n\n\n\n\nChatGPT: Optimizing Language Models for Dialogue. ChatGPT interacts in a conversational way. The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests.\nChatGPT is a sibling model to InstructGPT, which is trained to follow an instruction in a prompt and provide a detailed response.\n\n\n\nChatGPT"
  },
  {
    "objectID": "devops/aws.html",
    "href": "devops/aws.html",
    "title": "Aamanzon Web Sevices AWS",
    "section": "",
    "text": "About this site: to-do"
  },
  {
    "objectID": "devops/chatapp.html",
    "href": "devops/chatapp.html",
    "title": "Lab 1: chat App",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/1-chat-app\nhttps://sites.google.com/view/devopscifo/labs/1-chat-app/aws-chat-back https://sites.google.com/view/devopscifo/labs/1-chat-app/aws-chat-back/api-gateway-chat https://sites.google.com/view/devopscifo/labs/1-chat-app/aws-chat-back/dynamodb\nhttps://sites.google.com/view/devopscifo/labs/1-chat-app/react-chat-front https://sites.google.com/view/devopscifo/labs/1-chat-app/react-chat-front/react-chat-heroku https://sites.google.com/view/devopscifo/labs/1-chat-app/react-chat-front/react-chat-amplify"
  },
  {
    "objectID": "devops/devops.html",
    "href": "devops/devops.html",
    "title": "DevOps",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/home"
  },
  {
    "objectID": "devops/digitalocean.html",
    "href": "devops/digitalocean.html",
    "title": "Digital Ocean",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/digital-ocean"
  },
  {
    "objectID": "devops/docker.html",
    "href": "devops/docker.html",
    "title": "Docker",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/docker"
  },
  {
    "objectID": "devops/git.html",
    "href": "devops/git.html",
    "title": "Git",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/git"
  },
  {
    "objectID": "devops/github.html",
    "href": "devops/github.html",
    "title": "GitHub",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/git/github"
  },
  {
    "objectID": "devops/installjenkins.html",
    "href": "devops/installjenkins.html",
    "title": "Howto install Jenkins",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/install-jenkins"
  },
  {
    "objectID": "devops/installmaven.html",
    "href": "devops/installmaven.html",
    "title": "Howto install Maven",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/install-maven"
  },
  {
    "objectID": "devops/intelljidea.html",
    "href": "devops/intelljidea.html",
    "title": "IntellJIdea",
    "section": "",
    "text": "// TODO IMAGEN DEL LOGO Intellj Idea"
  },
  {
    "objectID": "devops/introductiondevops.html",
    "href": "devops/introductiondevops.html",
    "title": "Introduction",
    "section": "",
    "text": "📘 DevOps\nDevOps is “a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.”"
  },
  {
    "objectID": "devops/introductiondevops.html#what-devops-isnt",
    "href": "devops/introductiondevops.html#what-devops-isnt",
    "title": "Introduction",
    "section": "What DevOps Isn’t",
    "text": "What DevOps Isn’t\nGiven that DevOps is a philosophy… a management approach… and the combination of multiple IT disciplines… it might be easier to quickly look at some of what it isn’t.\n\nDevOps is not Agile. That said, your teams might indeed use Agile as a development methodology within an overall DevOps-style approach. Agile is certainly DevOps-compatible, and, like DevOps, values short, continual improvement.\nDevOps is not Continuous Integration. That said, CI is often a part of DevOps-style behavior. The two can be really closely related, in fact - so closely that it’s hard to tell the difference. I suppose you could argue that it’s difficult to practice the DevOps philosophy without using CI as an enabling implementation, but you can definitely have CI without behaving like a DevOps organization, so the two aren’t exactly the same thing.\nDevOps isn’t “the developers running Operations.” If anything, it’s Operations automating things to the point where Operations runs itself in response to authorized actions taken by other roles, including developers.\nDevOps isn’t a software development methodology. See the first bullet, above. DevOps is what happens while software development is happening, and largely what happens when software development (or a cycle of it), is done. You still need to manage your software development - you just need to use a methodology that’s DevOps-compatible.\nDevOps is not automation. However, you can’t have DevOps without automation. Automation is perhaps the biggest thing that Operations brings to the DevOps table, in fact.\n\n\nFurther, it actually seems to be an unstated goal of many DevOps champions to avoid the creation of any kind of trademarked, rigid, rulebook of “how to do DevOps,” as ITIL or TQM or something. This book certainly doesn’t attempt to provide “rules;” the goal here is to provide some understanding of what DevOps’ broad goals are.\n\nDevOps by DevOps Training"
  },
  {
    "objectID": "devops/introductiondevops.html#what-is-devops-2",
    "href": "devops/introductiondevops.html#what-is-devops-2",
    "title": "Introduction",
    "section": "What Is DevOps? (2)",
    "text": "What Is DevOps? (2)\nDevOps is a new term emerging from the collision of two major related trends. The first was also called “agile infrastructure” or “agile operations”; it sprang from applying Agile and Lean approaches to operations work. The second is a much expanded understanding of the value of collaboration between development and operations staff throughout all stages of the development lifecycle when creating and operating a service, and how important operations has become in our increasingly service-oriented world (cf. Operations: The New Secret Sauce).\n\nOne definition Jez Humble proposed to me is that DevOps is “a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.”\n\nWhat Is DevOps by the agile admin"
  },
  {
    "objectID": "devops/jenkins.html",
    "href": "devops/jenkins.html",
    "title": "Jenkins pipelines",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/docker"
  },
  {
    "objectID": "devops/k8s.html",
    "href": "devops/k8s.html",
    "title": "Kubernetes k8s",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/k8s"
  },
  {
    "objectID": "devops/k8sdigitalocean.html",
    "href": "devops/k8sdigitalocean.html",
    "title": "Lab 5: k8s on Digital Ocean",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/5-k8s-docean"
  },
  {
    "objectID": "devops/netbeans.html",
    "href": "devops/netbeans.html",
    "title": "NetBeans",
    "section": "",
    "text": "// TODO IMAGEN DEL LOGO NetBeans"
  },
  {
    "objectID": "devops/quarto.html",
    "href": "devops/quarto.html",
    "title": "Quarto and Markdown",
    "section": "",
    "text": "to-do\nhttps://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/"
  },
  {
    "objectID": "devops/resources.html",
    "href": "devops/resources.html",
    "title": "Resources",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/read-docs/sources"
  },
  {
    "objectID": "devops/springbooksdocker.html",
    "href": "devops/springbooksdocker.html",
    "title": "Lab 4: Spring Boot and Docker",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/3-springb-books-s3 https://sites.google.com/view/devopscifo/labs/4-springb-books-docker/test3_build20_error https://sites.google.com/view/devopscifo/labs/4-springb-books-docker/test3_build23"
  },
  {
    "objectID": "devops/springbooksintro.html",
    "href": "devops/springbooksintro.html",
    "title": "Lab 2: Spring Boot Intro",
    "section": "",
    "text": "About this site: do-do\nhttps://sites.google.com/view/devopscifo/labs/2-springb-books-intro"
  },
  {
    "objectID": "devops/springbookss3.html",
    "href": "devops/springbookss3.html",
    "title": "Lab 3: Spring Boot and AWS S3",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/3-springb-books-s3"
  },
  {
    "objectID": "devops/visualcode.html",
    "href": "devops/visualcode.html",
    "title": "Visual Studio Code",
    "section": "",
    "text": "// TODO IMAGEN DEL LOGO Visual Studio Code"
  },
  {
    "objectID": "ifcd0210/ifcd0210.html",
    "href": "ifcd0210/ifcd0210.html",
    "title": "IFCD0210 Official Docs",
    "section": "",
    "text": "Denominació: Desenvolupament d’aplicacions amb tecnologies web\nCodi: IFCD0210\nFamília professional: Informàtica i comunicacions\nÀrea professional: Desenvolupament\nNivell de qualificació professional: 3\nQualificació professional de referència: IFC154_3 - Desenvolupament d’aplicacions amb tecnologies web\n\n\n\n\nIFCD0210 fitxa\n\n\nIFCD0210 fitxa .pdf"
  },
  {
    "objectID": "ifcd0210/ifcd0210.html#relació-dunitats-de-competència-que-configuren-el-certificat-de-professionalitat",
    "href": "ifcd0210/ifcd0210.html#relació-dunitats-de-competència-que-configuren-el-certificat-de-professionalitat",
    "title": "IFCD0210 Official Docs",
    "section": "Relació d’unitats de competència que configuren el certificat de professionalitat",
    "text": "Relació d’unitats de competència que configuren el certificat de professionalitat\n\nUC0491_3: Desenvolupar elements de programari en l’entorn client.\nUC0492_3: Desenvolupar elements de programari en l’entorn servidor.\nUC0493_3: Implementar, verificar i documentar aplicacions web en entorns internet, intranet i extranet."
  },
  {
    "objectID": "ifcd0210/ifcd0210.html#competència-general",
    "href": "ifcd0210/ifcd0210.html#competència-general",
    "title": "IFCD0210 Official Docs",
    "section": "Competència general",
    "text": "Competència general\n\nDesenvolupar documents i components de programari que constitueixin aplicacions informàtiques en entorns distribuïts utilitzant tecnologies web, partint d’un disseny tècnic ja elaborat, i duent a terme la seva verificació, documentació i implantació. IFCD0210 official document"
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html",
    "href": "ifcd0210/ifcd0210calendar.html",
    "title": "IFCD0210 Calendar",
    "section": "",
    "text": "Calendar 2023"
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html#forecast-semester",
    "href": "ifcd0210/ifcd0210calendar.html#forecast-semester",
    "title": "IFCD0210 Calendar",
    "section": "Forecast semester",
    "text": "Forecast semester\nIFCD0210 Cifo Web 2022-2023"
  },
  {
    "objectID": "ifcd0210/ifcd0210deliveries.html",
    "href": "ifcd0210/ifcd0210deliveries.html",
    "title": "IFCD Deliveries",
    "section": "",
    "text": "Always in Quarto-Markdown format and code in GitHub repositories or Organitzations.\nDeliveries via github:\n\n\n\n\n\n\n\n\n\nCode\nDate\nDescription\n\n\n\n\n\nMF01-0491\n12/12/2022\nFront-end\n\n\n\nUF01-1841\n13/01/2023\nPrototip App POO i aplicant git/SCRUM/test\n\n\n\nUF02-1842\n10/02/2023\nLaboratori React amb components i hooks useReducer (Spring Boot server és opcional)\n\n\n\nUF03-1843\n20/02/2023\nLaboratori React styling and performance, responsive flex (opcional Thymeleaf a Spring Boot)\n\n\n\nMF01-0492\n21/02/2023\nProva objectiva i prova pràctica\n\n\n\nMF02-0492\n21/02/2022\nBack-end\n\n\n\nUF01-1844\n20/03/2023\nLaboratori app MVC amb Spring Boot Rest conectat a React-client\n\n\n\nUF02-1845\n19/04/2023\nLaboratori app Spring Boot Rest (opcional websocket) amb H2 JPA conectat a React-client\n\n\n\nUF03-1846\n09/05/2023\nCrear app web que comuniquiMÉS de 2 apps (2 Spring Boot i un React)\n\n\n\nMF02-0492\n10/05/2023\nProva objectiva i prova pràctica\n\n\n\nMF03-0493\n10/05/2022\nProject\n\n\n\nUF01\n08/06/2023\nCrear app web CRUD amb db en servidor remot Spring Boot i gestió de dades amb API fetch (opcional altres tech) JS React\n\n\n\nMF03-0493\n10/05/2023\nProva objectiva i prova pràctica"
  },
  {
    "objectID": "ifcd0210/ifcd0210initemail.html",
    "href": "ifcd0210/ifcd0210initemail.html",
    "title": "IFCD Init Mail",
    "section": "",
    "text": "No és un curs llarg, ni de broma, des del primer dia, a treballar.\nMooc Helsinki Java\n\nhttps://java-programming.mooc.fi/,\nla primera part Java Programming I, és fonamental fer-la aquesta setmana o durant aquestes dos primeres setmanes de curss o màxim, màxim durant les vacances de Nadal.\nja sabeu: algoritmica bàsica i POO\n\nLa nostra web: https://albertprofe.github.io/web/\n\nja la podeu putijejar\nencara no te domini propi: ho tindrà\nfeta amb quarto/markdown/github-pages: https://albertprofe.github.io/web/about/aboutthissite.html (ja ho explicaré a classe)\n\nComptes que necessitareu:\n\nGitHub\nOracle (per descarregar Java)\nMongoDB\nAWS (demana credit card)\n\nIDEs:\n\nVisual Code per ReactJS\nIntellJIdea per Java Spring Boot\nSublime\n\nOS, linux virtual machine? dual? ho parlem però mireu-vos això\n\nhttps://neverinstall.com/ (i feu-vos un compte)\n\nper qui no pugui vindre dilluns vinent, URL del jit si meet:\n\nhttps://meet.jit.si/cifoweb\nhttps://meet.jit.si/cifowebboard"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Technologies programmed in this site"
  },
  {
    "objectID": "index.html#skills-needed-as-a-developer-2022",
    "href": "index.html#skills-needed-as-a-developer-2022",
    "title": "Home",
    "section": "Skills needed as a developer (2022)",
    "text": "Skills needed as a developer (2022)\n\n📘 Developer skills summary\n\nAlgorithmic, OOP, COP\nArchitecture in mind - Systems Design\nControl Version Systems\nDevOps\nSCRUM\n\n\n\nThis wiki is focused in Web App development and the skills set needed. Nowadays a developer (not a coder) must have this skills set:\n\nAlgorithmic, (let’s say micro-development vs. architecture and macro-development skills). That is, for example the current most used and modern paradigms:\n\nScripting: BASH\nStructured and Procedural: C\nPOO: Java SE\nPOC: React JS and React TS\n\nArchitecture in mind: that it, System Design and Design-Patterns\n\nDDD: design a DDD-oriented microservice (Domain-driven design)\nSpring Boot\nCloud: AWS\n\nProject Management and Team Work:\n\nSCRUM and beyond SCRUM\n\nControl Version Systems:\n\nGit / GitHub / GitLab\nSubversion\n\nDevOps, from Test to Deploy, through Documentation\n\nabout this site, for documentation example.\nJUnit for Spring Boot\nJest for JS React\nDeploy on Heroku, Netlify, AWS Amplify\nJenkins, Docker and k8s"
  },
  {
    "objectID": "index.html#what-is-a-programmer-2022-openai",
    "href": "index.html#what-is-a-programmer-2022-openai",
    "title": "Home",
    "section": "What is a programmer (2022 OpenAI)",
    "text": "What is a programmer (2022 OpenAI)\nA programmer, also known as a software developer, needs a wide range of skills in order to be successful in their role. Some of the most important skills for a programmer include:\n\nStrong problem-solving skills: A programmer needs to be able to analyze complex problems and develop effective solutions using code. Logical thinking: Programming involves creating logical structures and processes that a computer can follow, so a programmer needs to have strong logical and analytical skills.\nKnowledge of programming languages and technologies: A programmer needs to have a deep understanding of the programming languages and technologies that they use, as well as the ability to learn new languages and technologies as needed.\nAttention to detail: Programming involves working with complex systems and large amounts of data, so a programmer needs to have a keen eye for detail and the ability to spot errors and inconsistencies.\nCommunication skills: A programmer often works as part of a team, so they need to be able to communicate effectively with other developers and stakeholders.\nTime management and organizational skills: A programmer typically has multiple tasks and deadlines to manage, so they need to be able to prioritize their work and stay organized.\n\nIn addition to these core skills, a programmer may also benefit from having knowledge of software development methodologies, such as Agile or Waterfall, as well as experience with version control systems and other tools commonly used in software development."
  },
  {
    "objectID": "index.html#how-can-we-get-it",
    "href": "index.html#how-can-we-get-it",
    "title": "Home",
    "section": "How can we get it?",
    "text": "How can we get it?\nTo be a good programmer, you need to have a strong foundation in computer science and software development principles, as well as the ability to learn and adapt to new technologies and languages. Some specific ways that you can improve your skills as a programmer include:\n\nPractice regularly: The best way to improve your programming skills is to write code regularly and work on a variety of projects. This will help you develop your problem-solving skills and build your knowledge of different languages and technologies.\nLearn from others: There are many resources available online, such as tutorials, blogs, and forums, where you can learn from experienced programmers and ask questions. You can also learn by working on open-source projects and collaborating with other developers.\nStay up-to-date: The field of software development is constantly evolving, so it is important to stay up-to-date with the latest technologies and best practices. This can help you stay ahead of the curve and keep your skills relevant.\nTake on new challenges: To continue growing as a programmer, you should strive to take on new and challenging projects that push you to learn and improve. This can help you develop new skills and broaden your expertise.\nSeek feedback: It can be helpful to seek feedback from experienced programmers, mentors, or peers on your work. This can help you identify areas for improvement and learn from others who have more experience.\n\nIn general, being a good programmer requires a combination of technical skills, problem-solving abilities, and a willingness to learn and grow. By focusing on these areas and continually striving to improve, you can become a successful and effective programmer."
  },
  {
    "objectID": "index.html#and-reading-books",
    "href": "index.html#and-reading-books",
    "title": "Home",
    "section": "And reading books?",
    "text": "And reading books?\nReading books can help improve your skills as a programmer in several ways. Some specific benefits of reading books for programmers include:\n\nExpanding your knowledge: Books can provide a wealth of information on a wide range of topics related to programming. By reading books, you can learn about new technologies, programming languages, and best practices that you may not have been aware of before.\nImproving your problem-solving skills: Many books on programming include examples and exercises that you can use to practice your problem-solving skills. By working through these exercises, you can improve your ability to analyze complex problems and develop effective solutions using code.\nBroadening your perspective: Reading books written by other programmers can provide valuable insights into how they approach problems and solve them. This can help you learn new techniques and strategies that you can apply to your own work.\nBuilding your vocabulary: Many technical books on programming include specialized terminology and concepts that you may not be familiar with. By reading these books, you can expand your vocabulary and become more fluent in the language of programming.\nStaying up-to-date: Reading books can help you keep up with the latest trends and developments in the field of software development. This can help you stay ahead of the curve and ensure that your skills remain relevant and in-demand.\n\nOverall, reading books can be a valuable way to improve your skills as a programmer. By reading books written by experienced programmers, you can learn new techniques and strategies, expand your knowledge, and stay up-to-date with the latest developments in the field."
  },
  {
    "objectID": "javase/resources.html",
    "href": "javase/resources.html",
    "title": "Java SE Resources",
    "section": "",
    "text": "Object-Oriented Programming with Java, part I Week 1\nObject-Oriented Programming with Java, part I Week 2\nObject-Oriented Programming with Java, part I Week 3\nObject-Oriented Programming with Java, part I Week 4\nObject-Oriented Programming with Java, part I Week 5\nObject-Oriented Programming with Java, part I Week 6"
  },
  {
    "objectID": "javase/resources.html#books",
    "href": "javase/resources.html#books",
    "title": "Java SE Resources",
    "section": "Books",
    "text": "Books\n\nDesign Patterns: Elements of Reusable Object-Oriented Software Erich Gamma; Richard Helm; Ralph Johnson; John Vlissides"
  },
  {
    "objectID": "javase/resources.html#web",
    "href": "javase/resources.html#web",
    "title": "Java SE Resources",
    "section": "Web",
    "text": "Web\n\nJava Programming Tutorial Object-oriented Programming (OOP) Basics: www3.ntu.edu.sg\nJava Oracle Official Documentation The Java™ Tutorials\nStackOverFlow Is Java “pass-by-reference” or “pass-by-value”?"
  },
  {
    "objectID": "javase/resources.html#youtube",
    "href": "javase/resources.html#youtube",
    "title": "Java SE Resources",
    "section": "Youtube",
    "text": "Youtube"
  },
  {
    "objectID": "javase/se-concepts-coupling.html",
    "href": "javase/se-concepts-coupling.html",
    "title": "Java SE: Coupling/Cohesion",
    "section": "",
    "text": "📘 Coupling/coherence\nCoupling refers to the degree to which one class or module depends on another class or module.\nHigh/tight coupling means that one class or module depends heavily on another class or module, while low/loose coupling means that one class or module has minimal dependencies on other classes or modules.\nCoupling and decoupling are fundamental in modern Java applied to microservices.\nCoupling refers to the degree of dependence, decoupling, on the other hand, refers to the process of reducing the degree of coupling between different classes or modules in a system. By decoupling classes or modules, you can make the system more modular, scalable, flexible, and maintainable."
  },
  {
    "objectID": "javase/se-concepts-coupling.html#key-concept",
    "href": "javase/se-concepts-coupling.html#key-concept",
    "title": "Java SE: Coupling/Cohesion",
    "section": "Key-concept",
    "text": "Key-concept\nThe importance of decoupling in Java lies in its ability to improve the modularity, flexibility, and maintainability of a system. When classes or modules are highly coupled, changes to one class or module can have a cascading effect on other classes or modules, which can make the system difficult to modify and maintain. By decoupling classes or modules, you can reduce the dependencies between them, which can make the system more modular and easier to modify and maintain.\n\n\n\nCoupling and cohesion by Евгений Мирошниченко, CC0, via Wikimedia Commons\n\n\nAdditionally, decoupling can help to improve the reusability of classes or modules. When classes or modules are highly coupled, it can be difficult to reuse them in other contexts or situations. By decoupling classes or modules, you can make them more self-contained and independent, which can make them more easily reusable in other contexts."
  },
  {
    "objectID": "javase/se-concepts-coupling.html#example-carfactory",
    "href": "javase/se-concepts-coupling.html#example-carfactory",
    "title": "Java SE: Coupling/Cohesion",
    "section": "Example: CarFactory",
    "text": "Example: CarFactory\nHere is an example of decoupling in Java, using a CarFactory class to create different types of cars:\npublic class CarFactory {\n    // Private constructor to prevent instantiation\n    private CarFactory() { }\n\n    // Factory method for creating cars\n    public static Car createCar(String type) {\n        switch (type) {\n            case \"sedan\":\n                return new Sedan(\"Toyota\", \"Camry\", 2019);\n            case \"hatchback\":\n                return new Hatchback(\"Honda\", \"Fit\", 2019);\n            case \"suv\":\n                return new SUV(\"Jeep\", \"Grand Cherokee\", 2019);\n            default:\n                throw new IllegalArgumentException(\"Invalid car type: \" + type);\n        }\n    }\n}\nIn this example, the CarFactory class defines a createCar() method, which is marked as public and static. This method is the factory method, which is responsible for creating objects of the Car type. The createCar() method takes a type parameter, which specifies the type of car to create, and returns an instance of the appropriate concrete class.\nBy decoupling the CarFactory class from the code that uses the cars, you can make the code that uses the cars more flexible and reusable. For example, you could define a CarDriver class that takes a Car object as a parameter, and uses the Car object to drive the car. Because the CarDriver class doesn’t depend on the CarFactory class, you can use the CarDriver class to drive any type of car, regardless of how the car was created.\nAdditionally, by decoupling the CarFactory class from the code that uses the cars, you can make the logic for creating the cars more modular and maintainable. For example, if you want to add a new type of car, such as a truck, you can simply add a new Truck class that extends the Car class, and then update the CarFactory class to include logic for creating instances of the Truck class. Because the CarFactory class is decoupled from the code that uses the cars, you don’t have to change any other code in the system in order to add the new car type."
  },
  {
    "objectID": "javase/se-concepts-coupling.html#conclusion",
    "href": "javase/se-concepts-coupling.html#conclusion",
    "title": "Java SE: Coupling/Cohesion",
    "section": "Conclusion",
    "text": "Conclusion\nOverall, decoupling is an important concept in Java programming, and can help to improve the modularity, flexibility, and maintainability of a system. By reducing the dependencies between classes or modules, you can make the system more modular and easier to modify and maintain, and you can improve the reusability of individual classes or modules."
  },
  {
    "objectID": "javase/se-concepts-createproject.html",
    "href": "javase/se-concepts-createproject.html",
    "title": "Java SE: Create Maven Project",
    "section": "",
    "text": "To create a Maven project with a standard directory structure using IntelliJ IDEA, you can follow these steps:\n\nInstall the Maven plugin in IntelliJ IDEA.\nOpen IntelliJ IDEA and navigate to the Plugins settings.\nSearch for Maven and install the plugin.\nIn IntelliJ IDEA, click Create New Project.\nIn the New Project dialog, select Maven from the list of project types.\nClick Next and select the maven-archetype-quickstart archetype. This archetype creates a standard Maven project with a directory structure for source code and unit tests.\nClick Next and enter the groupId and artifactId for your project. These are used to identify your project uniquely across all projects.\nClick Finish to create the project.\n\nYour project will be created with the following directory structure:\n\nmy-project\n├── pom.xml\n└── src\n    ├── main\n    │   └── Person.java\n    |       Account.Java\n    |       AccountManager.Java    \n    └── test\n        └── AccountManagerTest.java\nThe src/main/java directory is where you should put your Java source code, and the src/test/java directory is where you should put your unit tests.\nTo specify the version of Maven to use, you can edit the pom.xml file and add a  element to the  element. For example:\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.example</groupId>\n  <artifactId>my-project</artifactId>\n  <version>3.6.3</version>\n  ...\n</project>\nThis will use version 3.6.3 of Maven for the project."
  },
  {
    "objectID": "javase/se-concepts-createproject.html#step-by-step-screenshots-2022-12-14",
    "href": "javase/se-concepts-createproject.html#step-by-step-screenshots-2022-12-14",
    "title": "Java SE: Create Maven Project",
    "section": "Step-by-step screenshots (2022-12-14)",
    "text": "Step-by-step screenshots (2022-12-14)\nScreen-shoots Create Maven Project"
  },
  {
    "objectID": "javase/se-concepts-maven.html",
    "href": "javase/se-concepts-maven.html",
    "title": "Java SE: Maven",
    "section": "",
    "text": "📘 Dependency Management: Maven\nApache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project’s build, reporting and documentation from a central piece of information.\nThese tools allow developers to specify the dependencies for their project in a file, and then automatically handle the process of downloading and installing those dependencies. This can save a lot of time and effort for developers, and helps ensure that all of the necessary dependencies are present and up-to-date in a project."
  },
  {
    "objectID": "javase/se-concepts-maven.html#maven",
    "href": "javase/se-concepts-maven.html#maven",
    "title": "Java SE: Maven",
    "section": "Maven",
    "text": "Maven\nMaven is a build automation tool used primarily for Java projects.\nMaven can also be used to build and manage projects written in C#, Ruby, Scala, and other languages. The Maven project is hosted by the Apache Software Foundation, where it was formerly part of the Jakarta Project.\nMaven addresses two aspects of building software: - how software is built and - its dependencies"
  },
  {
    "objectID": "javase/se-concepts-maven.html#maven-central-repository",
    "href": "javase/se-concepts-maven.html#maven-central-repository",
    "title": "Java SE: Maven",
    "section": "Maven Central Repository",
    "text": "Maven Central Repository\nLink: Maven Central Repository\nMaven repository is a directory where all the dependencies such as jars, library files, plugins, or other artifacts that will be required by the projects are stored.\nThese repositories help us to store and maintain useful resources so that they can be used in our maven projects while building and deploying the artifacts.\nAll the layout and structure of the underlying repositories of maven of any type are completely hidden for maven users."
  },
  {
    "objectID": "javase/se-concepts-maven.html#maven-lifecycle",
    "href": "javase/se-concepts-maven.html#maven-lifecycle",
    "title": "Java SE: Maven",
    "section": "Maven Lifecycle",
    "text": "Maven Lifecycle\nMaven is a build automation tool for Java projects. It is used to manage the build, reporting, and documentation of a project. Maven has a defined lifecycle that outlines the steps required to build and distribute a project.\nThe Maven lifecycle has three main phases:\n\nclean: This phase is used to clean up any previous build artifacts.\ndefault: This is the main phase of the lifecycle, where the project is built, tested, and packaged.\nsite: This phase is used to generate the project’s documentation and site information.\n\nEach phase of the Maven lifecycle consists of a set of build phases, which are executed in a specific order. For example, the default phase consists of the following build phases:\n\nvalidate: Validate the project’s configuration and dependencies.\ncompile: Compile the project’s source code.\ntest: Run the project’s tests.\npackage: Package the compiled code into a distributable format (e.g., a JAR file).\ninstall: Install the packaged code into the local repository.\ndeploy: Deploy the packaged code to a remote repository for others to use.\n\nEach build phase consists of a set of build goals, which are the specific tasks that are executed to accomplish the phase’s objectives. For example, the compile phase has a build goal called compiler:compile that is responsible for compiling the project’s source code.\nBy following the defined Maven lifecycle, developers can easily build, test, and distribute their Java projects in a consistent and repeatable manner."
  },
  {
    "objectID": "javase/se-concepts-maven.html#archetype-groupid-artifactid",
    "href": "javase/se-concepts-maven.html#archetype-groupid-artifactid",
    "title": "Java SE: Maven",
    "section": "Archetype, GroupId, ArtifactId",
    "text": "Archetype, GroupId, ArtifactId\nAn archetype is a template for a project. It provides a predefined structure and files for a project, so that you don’t have to create them manually.\nGroupId and artifactId are two important elements of a Maven project.\nThe groupId is a unique identifier for a project, and is typically used to group related projects together.\nThe artifactId is the unique identifier for a specific project, and is used to identify the project within the group.\nTogether, the groupId and artifactId help to uniquely identify a project within the Maven ecosystem."
  },
  {
    "objectID": "javase/se-concepts-objects.html",
    "href": "javase/se-concepts-objects.html",
    "title": "Java SE: Class and Objects",
    "section": "",
    "text": "📘 What is a Java Object\nAn object in Java is a container that holds both data and behavior. The data is represented by the object’s attributes, and the behavior is represented by the methods that operate on those attributes.\nWhen you create an object, you are creating an instance of a class, which is a blueprint or template for the object."
  },
  {
    "objectID": "javase/se-concepts-objects.html#introduction",
    "href": "javase/se-concepts-objects.html#introduction",
    "title": "Java SE: Class and Objects",
    "section": "Introduction",
    "text": "Introduction\nEach object has its own unique identity, and it maintains its own state by storing the values of its attributes. The object’s behavior is defined by the methods that operate on its attributes, and these methods can be invoked by other code to ask the object to perform a specific action.\nObjects are an essential concept in object-oriented programming, and they are used to model real-world entities in a program. For example, you could create an object to represent a particular person, with attributes such as name, age, and address, and methods that operate on these attributes, such as a method to calculate their age in a particular year.\nIn Java, you can create objects by using the new keyword and the class constructor to allocate memory for the object, and then you can access the object’s attributes and methods by using the . (dot) operator. For example, if you have a class called Person, you could create an object of that class like this:\nPerson carla = new Person();\nAnd then you could access the object’s attributes and methods like this:\nperson.name = \"Carla Whitesand\";\nperson.setAddress(\"123 Main Street\");\nint age = person.calculateAge(2022);\nIn this example, name and setAddress() are attributes and methods of the Person class, and person is an object of that class. You can use this object to store and manipulate data according to the rules defined by the class."
  },
  {
    "objectID": "javase/se-concepts-objects.html#creating-objects",
    "href": "javase/se-concepts-objects.html#creating-objects",
    "title": "Java SE: Class and Objects",
    "section": "Creating Objects",
    "text": "Creating Objects\nfrom The Java™ Tutorials\nAs you know, a class provides the blueprint for objects; you create an object from a class. Each of the following statements taken from the CreateObjectDemo program creates an object and assigns it to a variable:\nPoint originOne = new Point(23, 94);\nRectangle rectOne = new Rectangle(originOne, 100, 200);\nRectangle rectTwo = new Rectangle(50, 100);\nThe first line creates an object of the Point class, and the second and third lines each create an object of the Rectangle class.\nEach of these statements has three parts (discussed in detail below):\n\nDeclaration: The code set in bold are all variable declarations that associate a variable name with an object type.\nInstantiation: The new keyword is a Java operator that creates the object.\nInitialization: The new operator is followed by a call to a constructor, which initializes the new object."
  },
  {
    "objectID": "javase/se-concepts-objects.html#declaring-a-variable-to-refer-to-an-object",
    "href": "javase/se-concepts-objects.html#declaring-a-variable-to-refer-to-an-object",
    "title": "Java SE: Class and Objects",
    "section": "Declaring a Variable to Refer to an Object",
    "text": "Declaring a Variable to Refer to an Object\nPreviously, you learned that to declare a variable, you write:\ntype name;\nThis notifies the compiler that you will use name to refer to data whose type is type. With a primitive variable, this declaration also reserves the proper amount of memory for the variable.\nYou can also declare a reference variable on its own line. For example:\nPoint originOne;\n\n\n\n\n\n\nJust a reference variable: is empty\n\n\n\nIf you declare originOne like this, its value will be undetermined until an object is actually created and assigned to it. Simply declaring a reference variable does not create an object.\n\n\nFor that, you need to use the new operator, as described in the next section. You must assign an object to originOne before you use it in your code. Otherwise, you will get a compiler error.\nA variable in this state, which currently references no object, can be illustrated as follows (the variable name, originOne, plus a reference pointing to nothing):\noriginOne –> null\n\n\n\n“originOne –> null” figure part 1"
  },
  {
    "objectID": "javase/se-concepts-objects.html#instantiating-a-class",
    "href": "javase/se-concepts-objects.html#instantiating-a-class",
    "title": "Java SE: Class and Objects",
    "section": "Instantiating a Class",
    "text": "Instantiating a Class\n\n📘 Instantiating a Class\nThe new operator instantiates a class by allocating memory for a new object and returning a reference to that memory. The new operator also invokes the object constructor.\n\n\n\n\n\n\n\nInstantiating a class\n\n\n\nThe phrase “instantiating a class” means the same thing as “creating an object.” When you create an object, you are creating an “instance” of a class, therefore “instantiating” a class.\nThe new operator requires a single, postfix argument: a call to a constructor. The name of the constructor provides the name of the class to instantiate.\n\n\nThe new operator returns a reference to the object it created. This reference is usually assigned to a variable of the appropriate type, like:\nPoint originOne = new Point(23, 94);\noriginOne –> Point object\n\n\n\n“originOne –> Point object” figure part 2\n\n\nThe reference returned by the new operator does not have to be assigned to a variable. It can also be used directly in an expression. For example:\nint height = new Rectangle().height;\nThis statement will be discussed in the next section or you can go here."
  },
  {
    "objectID": "javase/se-concepts-objects.html#initializing-an-object",
    "href": "javase/se-concepts-objects.html#initializing-an-object",
    "title": "Java SE: Class and Objects",
    "section": "Initializing an Object",
    "text": "Initializing an Object\nHere’s the code for the Point class:\npublic class Point {\n    public int x = 0;\n    public int y = 0;\n    //constructor\n    public Point(int a, int b) {\n        x = a;\n        y = b;\n    }\n}\nThis class contains a single constructor. You can recognize a constructor because its declaration uses the same name as the class and it has no return type.\nThe constructor in the Point class takes two integer arguments, as declared by the code (int a, int b). The following statement provides 23 and 94 as values for those arguments:\nPoint originOne = new Point(23, 94);"
  },
  {
    "objectID": "javase/se-concepts-objects.html#example-uml-class-and-object",
    "href": "javase/se-concepts-objects.html#example-uml-class-and-object",
    "title": "Java SE: Class and Objects",
    "section": "Example UML: class and object",
    "text": "Example UML: class and object\n\n\n\nThe class body may contain member variables, constructors, public methods, private helper methods and others."
  },
  {
    "objectID": "javase/se-concepts-package.html",
    "href": "javase/se-concepts-package.html",
    "title": "Java SE: Packages",
    "section": "",
    "text": "📘 Design-patterns\nIn Java, a package is a collection of related classes and interfaces that provide a higher-level abstraction for organizing and modularizing your code.\nPackages allow you to group similar classes and interfaces together, and to provide a convenient namespace for accessing those classes and interfaces from other parts of your program.\n\n\nWhen you create a new class or interface in Java, you can place it in a package by using the package keyword at the top of the file, followed by the name of the package. For example, the following code shows how to create a new class called Example and place it in the com.example package:\npackage com.example;\n\npublic class Example {\n    // Class code goes here...\n}\nBy placing the Example class in the com.example package, you can access the class from other parts of your program by using the fully-qualified class name, which includes the package name as well as the class name. For example, the following code shows how to use the Example class from within another class called Main:\npublic class Main {\n    public static void main(String[] args) {\n        // Use fully-qualified class name to access Example class\n        com.example.Example example = new com.example.Example();\n    }\n}\nIn this example, the Main class uses the com.example.Example class by specifying the fully-qualified class name, which includes the package name as well as the class name. This allows the Main class to access the Example class from within the com.example package."
  },
  {
    "objectID": "javase/se-concepts-package.html#package-in-java-se-or-java-ee-is-not-similiar",
    "href": "javase/se-concepts-package.html#package-in-java-se-or-java-ee-is-not-similiar",
    "title": "Java SE: Packages",
    "section": "Package in Java SE or Java EE is not similiar",
    "text": "Package in Java SE or Java EE is not similiar\n\n\n\n\n\n\nImportant\n\n\n\nThe package that a class is placed in can be an important factor in how the framework resolves requests. This is because the Spring Framework uses the package structure of a project to help determine the path of a request, and to map the request to the appropriate controller or handler.\n\n\nFor example, consider a Spring MVC application that contains a com.example.web package, which contains a HomeController class that is used to handle requests to the application’s home page. In this case, the HomeController class is placed in the com.example.web package, which means that the path of a request to the home page would include the package name as part of the URL.\nFor instance, if the application’s base URL is http://localhost:8080, then a request to the home page might have a URL like the following:\nhttp://localhost:8080/com.example.web/home\nIn this case, the com.example.web package is part of the path that resolves the request to the HomeController class, which is responsible for handling the request and generating a response."
  },
  {
    "objectID": "javase/se-concepts-package.html#conclusion",
    "href": "javase/se-concepts-package.html#conclusion",
    "title": "Java SE: Packages",
    "section": "Conclusion",
    "text": "Conclusion\nOverall, packages are an important concept in Java, and can help to improve the modularity, organization, and maintainability of your code. By grouping related classes and interfaces together into packages, you can provide a convenient namespace for accessing those classes and interfaces, and you can better manage the dependencies between different parts of your program."
  },
  {
    "objectID": "javase/se-concepts-scope.html",
    "href": "javase/se-concepts-scope.html",
    "title": "Java SE: Scope",
    "section": "",
    "text": "In Java, the scope of a variable refers to the parts of the program where the variable is accessible. A variable has a certain scope based on where it is declared, and the scope of a variable determines where in the program the variable can be used and accessed.\nThere are three main types of scope in Java:\n\nClass scope: A variable that is declared within a class, but outside of any method, has class scope, which means that it can be accessed and used by any method within the class.\nMethod scope: A variable that is declared within a method has method scope, which means that it can only be accessed and used within that method.\nLocal scope: A variable that is declared within a block of code, such as within a loop or an if statement, has local scope, which means that it can only be accessed and used within that block of code."
  },
  {
    "objectID": "javase/se-concepts-scope.html#global-scope-in-java",
    "href": "javase/se-concepts-scope.html#global-scope-in-java",
    "title": "Java SE: Scope",
    "section": "Global scope in Java?",
    "text": "Global scope in Java?\nIn Java, there is no concept of global scope in the traditional sense. In other programming languages, global variables are variables that are declared outside of any function or class, and are accessible and usable by any part of the program. In Java, however, there is no way to declare a variable outside of a class or method, so there are no global variables in the strict sense of the term.\nInstead, in Java, the closest equivalent to global scope is class scope. In Java, a variable that is declared within a class, but outside of any method, has class scope, which means that it can be accessed and used by any method within the class.\nHere is an example of class scope in Java:\npublic class Example {\n    // Class variable\n    static int classVariable = 1;\n\n    public static void main(String[] args) {\n        // Print class variable\n        System.out.println(classVariable); // Output: 1\n\n        // Call method\n        someMethod();\n    }\n\n    public static void someMethod() {\n        // Print class variable\n        System.out.println(classVariable); // Output: 1\n    }\n}\nIn this example, the classVariable variable is declared within the Example class, but outside of any method, so it has class scope. This means that the classVariable variable can be accessed and used by any method within the Example class, including the main method and the someMethod method.\nWhile Java doesn’t have a concept of global scope in the traditional sense, class scope provides a similar level of accessibility and usability for variables. By declaring variables within a class, but outside of any method, you can make those variables accessible and usable by any method within the class, which can be useful for sharing data and state between different parts of your program."
  },
  {
    "objectID": "javase/se-concepts-scope.html#key-concept-curly-brackets",
    "href": "javase/se-concepts-scope.html#key-concept-curly-brackets",
    "title": "Java SE: Scope",
    "section": "Key-concept: curly brackets",
    "text": "Key-concept: curly brackets\n\n📘 Curly brackets are the key\nIn Java, the scope of a variable is determined by the position of the variable’s declaration within the code, and specifically by the presence or absence of curly braces {}.\n\n\n\nA variable that is declared outside of any curly braces has global or class scope, depending on where it is declared.\nA variable that is declared within a pair of curly braces has local scope, which means that it can only be accessed and used within those curly braces.\n\nHere is an example of how scope works in Java based on the position of the variable’s declaration within curly braces:\npublic class Example {\n    // Global or class scope\n    static int globalOrClassVariable = 1;\n\n    public static void main(String[] args) {\n        // Local scope\n        {\n            int localVariable = 2;\n\n            // Print local variable\n            System.out.println(localVariable); // Output: 2\n        }\n\n        // Print global or class variable\n        System.out.println(globalOrClassVariable); // Output: 1\n\n        // Print local variable (not accessible outside of curly braces)\n        // System.out.println(localVariable); // Error: localVariable cannot be resolved\n    }\n}\nIn this example, the globalOrClassVariable variable is declared outside of any curly braces, so it has global or class scope, depending on where it is declared. The localVariable variable, on the other hand, is declared within a pair of curly braces, so it has local scope and can only be accessed and used within those curly braces.\nAs this example illustrates, the position of a variable’s declaration within curly braces is a key factor in determining the variable’s scope in Java."
  },
  {
    "objectID": "javase/se-concepts-scope.html#conclusion",
    "href": "javase/se-concepts-scope.html#conclusion",
    "title": "Java SE: Scope",
    "section": "Conclusion",
    "text": "Conclusion\nBy understanding how scope works in Java, you can effectively manage the visibility and accessibility of your variables, and avoid common pitfalls such as variable shadowing and scope-related errors."
  },
  {
    "objectID": "javase/se-concepts-static.html",
    "href": "javase/se-concepts-static.html",
    "title": "Java SE: static modifier",
    "section": "",
    "text": "📘 static modifier\nIn Java, the static modifier is used to indicate that a class or class member belongs to the class itself, rather than to an instance of the class.\nIn other words, the static modifier indicates that the class or class member is associated with the class as a whole, rather than with a specific instance of the class.\n\n\nThe static modifier has several different uses in Java, depending on where it is applied. Here are some examples of how the static modifier can be used in Java."
  },
  {
    "objectID": "javase/se-concepts-static.html#static-field",
    "href": "javase/se-concepts-static.html#static-field",
    "title": "Java SE: static modifier",
    "section": "static field",
    "text": "static field\nWhen applied to a field, the static modifier indicates that the field belongs to the class itself, rather than to an instance of the class. This means that all instances of the class share the same value for the static field.\nFor example:\npublic class Counter {\n    // Static field\n    private static int count = 0;\n\n    // Constructor\n    public Counter() {\n        count++;\n    }\n\n    // Getter method for the count field\n    public static int getCount() {\n        return count;\n    }\n}\nIn this example, the count field is marked as static, which means that all instances of the Counter class share the same value for the count field. When a new instance of the Counter class is created, the count field is incremented, and the new value is shared by all instances of the class.\nAnother example:\npublic class Account {\n    // Static field\n    private static int nextAccountNumber = 1;\n\n    // Private instance variables\n    private int accountNumber;\n    private String name;\n    private double balance;\n\n    // Constructor\n    public Account(String name, double balance) {\n        this.accountNumber = nextAccountNumber++;\n        this.name = name;\n        this.balance = balance;\n    }\n\n    // Getter method for the accountNumber field\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    // Getter method for the name field\n    public String getName() {\n        return name;\n    }\n\n    // Getter method for the balance field\n    public double getBalance() {\n        return balance;\n    }\n\n    // Method for depositing money into the account\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    // Method for withdrawing money from the account\n    public void withdraw(double amount) {\n        balance -= amount;\n    }\n}\nIn this example, the Account class defines a nextAccountNumber field that is marked as static. This means that the nextAccountNumber field belongs to the Account class itself, rather than to an instance of the Account class. This means that all instances of the Account class share the same value for the nextAccountNumber field.\nWhen a new instance of the Account class is created, the nextAccountNumber field is incremented, and the new value is shared by all instances of the class. This allows each instance of the Account class to have a unique accountNumber field, which is generated automatically using the nextAccountNumber field."
  },
  {
    "objectID": "javase/se-concepts-static.html#static-method",
    "href": "javase/se-concepts-static.html#static-method",
    "title": "Java SE: static modifier",
    "section": "static method",
    "text": "static method\nWhen applied to a method, the static modifier indicates that the method belongs to the class itself, rather than to an instance of the class. This means that the static method can be called on the class itself, rather than on an instance of the class.\nFor example:\npublic class MathUtils {\n    // Static method\n    public static double squareRoot(double number) {\n        return Math.sqrt(number);\n    }\n}\nIn this example, the squareRoot() method is marked as static, which means that it can be called on the MathUtils class itself, rather than on an instance of the MathUtils class. This allows the squareRoot() method to be called without creating an instance of the MathUtils class, which can be useful in some situations."
  },
  {
    "objectID": "javase/se-concepts-static.html#static-class",
    "href": "javase/se-concepts-static.html#static-class",
    "title": "Java SE: static modifier",
    "section": "static class",
    "text": "static class\nWhen applied to a class, the static modifier indicates that the class is a nested class. In other words, the static class is defined inside another class, and is associated with the outer class.\nHere is an example of how the static modifier can be used when applied to a class in Java, using an Account class and a nested Transaction class as examples:\npublic class Account {\n    // Static field\n    private static int nextAccountNumber = 1;\n\n    // Private instance variables\n    private int accountNumber;\n    private String name;\n    private double balance;\n\n    // Static nested class\n    public static class Transaction {\n        // Private instance variables\n        private int transactionNumber;\n        private double amount;\n        private String type;\n\n        // Constructor\n        public Transaction(double amount, String type) {\n            this.transactionNumber = nextAccountNumber++;\n            this.amount = amount;\n            this.type = type;\n        }\n\n        // Getter method for the transactionNumber field\n        public int getTransactionNumber() {\n            return transactionNumber;\n        }\n\n        // Getter method for the amount field\n        public double getAmount() {\n            return amount;\n        }\n\n        // Getter method for the type field\n        public String getType() {\n            return type;\n        }\n    }\n\n    // Constructor\n    public Account(String name, double balance) {\n        this.accountNumber = nextAccountNumber++;\n        this.name = name;\n        this.balance = balance;\n    }\n\n    // Getter method for the accountNumber field\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    // Getter method for the name field\n    public String getName() {\n        return name;\n    }\n\n    // Getter method for the balance field\n    public double getBalance() {\n        return balance;\n    }\n\n}"
  },
  {
    "objectID": "javase/se-concepts-tdd.html",
    "href": "javase/se-concepts-tdd.html",
    "title": "Java SE: JUnit and TDD",
    "section": "",
    "text": "📘 JUnit\nJUnit is a unit testing framework for the Java programming language. It is used to write and run repeatable tests for Java code. JUnit provides a set of annotations and assertions that make it easy to write and run tests, as well as a simple framework for organizing and running tests."
  },
  {
    "objectID": "javase/se-concepts-tdd.html#junit-unit-test",
    "href": "javase/se-concepts-tdd.html#junit-unit-test",
    "title": "Java SE: JUnit and TDD",
    "section": "JUnit: unit test",
    "text": "JUnit: unit test\nLink: Junit and User guide\nUnit tests are the smallest elements in the test automation process. With the help of unit tests, the developer can check the business logic of any class. So JUnit plays a vital role in the development of a test-driven development framework.\nThe following example provides a glimpse at the minimum requirements for writing a test in JUnit Jupiter. Subsequent sections of this chapter will provide further details on all available features.\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport example.util.Calculator;\nimport org.junit.jupiter.api.Test;\n\nclass MyFirstJUnitJupiterTests {\n\n    private final Calculator calculator = new Calculator();\n\n    @Test\n    void addition() {\n        assertEquals(2, calculator.add(1, 1));\n    }\n\n}"
  },
  {
    "objectID": "javase/se-concepts-tdd.html#tdd",
    "href": "javase/se-concepts-tdd.html#tdd",
    "title": "Java SE: JUnit and TDD",
    "section": "TDD",
    "text": "TDD\nTest-driven development is a development technique where the developer must first write a test that fails before writing a new functional code<. It ensures a proven way to ensure effective unit testing; however, it does not replace traditional testing. We believe that TDD is an excellent practice that all software developers should consider during the development process.\nSteps for the same are given below:\n\nFirstly, add a test.\nRun all the tests and see if any new test fails.\nUpdate the code to make it pass the new tests.\nRerun the test and if they fail, then refactor again and repeat."
  },
  {
    "objectID": "javase/se-concepts-tdd.html#example",
    "href": "javase/se-concepts-tdd.html#example",
    "title": "Java SE: JUnit and TDD",
    "section": "Example",
    "text": "Example\nHere is an example of how TDD could be applied in a Java project using JUnit. Let’s say we are building a class that represents a simple calculator. We want the calculator to have methods for adding, subtracting, multiplying, and dividing two numbers.\nFirst, we would write a test for the add method, which should take two numbers as arguments and return their sum. Here is an example of how this test might look using JUnit:\npublic class CalculatorTest {\n\n  @Test\n  public void testAdd() {\n    Calculator calc = new Calculator();\n    double result = calc.add(2, 3);\n    assertEquals(5, result, 0);\n  }\n\n}\nNext, we would run the test to see if it fails. Since we have not yet implemented the add method, the test should fail with a message indicating that the add method is not yet implemented.\nNext, we would write the code for the add method. Here is an example of how this method might look:\npublic class Calculator {\n\n  public double add(double a, double b) {\n    return a + b;\n  }\n\n}\nFinally, we would run the test again to ensure that it passes. If the test passes, we know that the add method is working correctly and we can move on to the next feature. We would repeat this process for each of the calculator’s methods, writing a test for each one, implementing the code, and then running the test to ensure it passes.\nThis is just one example of how TDD can be applied in a Java project using JUnit. There are many other ways to approach TDD, and the specific steps and details will vary depending on the project and the requirements."
  },
  {
    "objectID": "javase/se-concepts-tdd.html#naming-the-test-class",
    "href": "javase/se-concepts-tdd.html#naming-the-test-class",
    "title": "Java SE: JUnit and TDD",
    "section": "Naming the test class",
    "text": "Naming the test class\nWe use common conventions in naming the test class. Let’s start with the name of the class which is being tested and assume the name of that class is Student. In that case, the name of the test class should be StudentTest. We have to append Test to it. The same naming convention is used in the case of methods. If there is a method DisplayStudentAddress(), then the name of the method in testing should be testDisplayStudentAddress().\n\n\n\nNaming in Production\nNaming in Testing\n\n\n\n\nStudent\nStudentTest\n\n\nDisplayStudentAddress()\ntestDisplayStudentAddress()"
  },
  {
    "objectID": "javase/se-pattern-abstractfactory.html",
    "href": "javase/se-pattern-abstractfactory.html",
    "title": "Java Patterns: Abstract Factory",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/se-pattern-builder.html",
    "href": "javase/se-pattern-builder.html",
    "title": "Java Patterns: Builder",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/se-pattern-factory.html",
    "href": "javase/se-pattern-factory.html",
    "title": "Java Patterns: Factory",
    "section": "",
    "text": "The factory pattern is a design pattern that is used to create objects in a structured and standardized way. The factory pattern defines a factory method, which is a method that is responsible for creating objects of a specific type.\n\nThe factory pattern is useful when you want to centralize the logic for creating objects, and to provide a consistent and standard way of creating objects of different types. This can help to reduce duplication of code, and to make the code more maintainable and extensible.\nIn the context of the factory pattern, decoupling refers to the idea of separating the logic for creating objects from the code that uses those objects. By decoupling these two aspects of the system, you can make the code that uses the objects more flexible and reusable, and you can make the logic for creating the objects more modular and maintainable."
  },
  {
    "objectID": "javase/se-pattern-factory.html#example-carfactory",
    "href": "javase/se-pattern-factory.html#example-carfactory",
    "title": "Java Patterns: Factory",
    "section": "Example CarFactory",
    "text": "Example CarFactory\nHere is an example of how to implement the factory pattern in Java, using a CarFactory class to create different types of cars:\npublic class CarFactory {\n    // Private constructor to prevent instantiation\n    private CarFactory() { }\n\n    // Factory method for creating cars\n    public static Car createCar(String type) {\n        switch (type) {\n            case \"sedan\":\n                return new Sedan(\"Toyota\", \"Camry\", 2019);\n            case \"hatchback\":\n                return new Hatchback(\"Honda\", \"Fit\", 2019);\n            case \"suv\":\n                return new SUV(\"Jeep\", \"Grand Cherokee\", 2019);\n            default:\n                throw new IllegalArgumentException(\"Invalid car type: \" + type);\n        }\n    }\n}\nIn this example, the CarFactory class defines a createCar() method, which is marked as public and static. This method is the factory method, which is responsible for creating objects of the Car type.\nThe createCar() method takes a type parameter, which specifies the type of car to create. Depending on the value of the type parameter, the createCar() method creates and returns an instance of the Sedan, Hatchback, or SUV class.\nTo use the CarFactory class, you would call the createCar() method, passing in the type of car.\nUsing the @Data annotation from the Lombok library to automatically generate getters, setters, and constructors for the Sedan, Hatchback, and SUV classes:\n // Sedan class\n    @Data\n    public static class Sedan implements Car {\n        private String make;\n        private String model;\n        private int year;\n    }\n// Hatchback class\n    @Data\n    public static class Hatchback implements Car {\n        private String make;\n        private String model;\n        private int year;\n    }\n// SUV class\n    @Data\n    public static class SUV implements Car {\n        private String make;\n        private String model;\n        private int year;\n    }\nIn this example, the CarFactory class defines a createCar() method, which is marked as public and static. This method is the factory method, which is responsible for creating objects of the Car type.\nThe createCar() method takes a type parameter, which specifies the type of car to create. Depending on the value of the type parameter, the createCar() method creates and returns an instance of the Sedan, Hatchback, or SUV class.\nThe Sedan, Hatchback, and SUV classes are nested classes inside the CarFactory class. Each of these classes is marked with the @Data annotation from the Lombok library, which generates the appropriate getters, setters, and constructors for the class. This means that you don’t have to write these methods manually, which can save a lot of time and effort.\nTo use the CarFactory class, you would call the createCar() method, passing in the type of car you want to create. For example:\nCar sedan = CarFactory.createCar(\"sedan\");\nThis code would create and return an instance of the Sedan class, with the specified make, model, and year."
  },
  {
    "objectID": "javase/se-pattern-factory.html#carfactory-decoupling",
    "href": "javase/se-pattern-factory.html#carfactory-decoupling",
    "title": "Java Patterns: Factory",
    "section": "CarFactory decoupling",
    "text": "CarFactory decoupling\nThe factory pattern is often used in conjunction with the concept of decoupling, which is the idea of separating different components or aspects of a system in order to make the system more modular, flexible, and maintainable.\nBy decoupling the CarFactory class from the code that uses the cars, you can make the code that uses the cars more flexible and reusable. For example, you could define a CarDriver class that takes a Car object as a parameter, and uses the `"
  },
  {
    "objectID": "javase/se-pattern-intro.html",
    "href": "javase/se-pattern-intro.html",
    "title": "Java SE Design-Patterns",
    "section": "",
    "text": "📘 Design-patterns\nIn Java, a design pattern is a general repeatable solution to a commonly occurring problem in software design.\nA design pattern is not a finished design that can be transformed directly into code, but rather it is a description or template that can be used to solve a problem that is commonly encountered in software development.\n\n\nThere are many different design patterns that have been identified and documented, and each pattern provides a different solution to a specific problem.\nSome of the most important design patterns in Java include:\n\nthe singleton,\nthe factory,\nthe abstract factory\nthe observer,\nand the builder.\n\nThese patterns are commonly used in Java because they provide solutions to common problems that are encountered in software development, and they can help to make your code more efficient, reusable, and maintainable."
  },
  {
    "objectID": "javase/se-pattern-intro.html#design-patterns-cheat-sheet",
    "href": "javase/se-pattern-intro.html#design-patterns-cheat-sheet",
    "title": "Java SE Design-Patterns",
    "section": "Design Patterns Cheat-sheet",
    "text": "Design Patterns Cheat-sheet\n\n\n\nDesign Patterns Cheat-sheet"
  },
  {
    "objectID": "javase/se-pattern-observer.html",
    "href": "javase/se-pattern-observer.html",
    "title": "Java Patterns: Observer",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/se-pattern-singleton.html",
    "href": "javase/se-pattern-singleton.html",
    "title": "Java Patterns: Singleton",
    "section": "",
    "text": "The singleton pattern is a design pattern in computer programming and Java that is used to restrict the instantiation of a class to one “single” instance.\n\n\nThis is useful when you want to make sure that only one object of a particular class is created, because this can be helpful for managing resources and ensuring that your program is running as efficiently as possible.\nIn Java, the singleton pattern can be implemented by creating a private constructor for the class, which prevents other objects from creating instances of the class.\nThe class also typically provides a static method that allows other classes to access the single instance of the class, which is created the first time the static method is called. This ensures that only one instance of the class is created, and that all other classes can access this instance easily.\n\n\n\nSingleton Pattern"
  },
  {
    "objectID": "javase/se-pattern-singleton.html#example-logger",
    "href": "javase/se-pattern-singleton.html#example-logger",
    "title": "Java Patterns: Singleton",
    "section": "Example: Logger",
    "text": "Example: Logger\nHere is an example of a singleton class in Java, using a Logger class as an example:\npublic class Logger {\n    // Private static instance of the class\n    private static Logger instance = null;\n\n    // Private instance variable\n    private PrintWriter writer;\n\n    // Private constructor\n    private Logger() {\n        try {\n            writer = new PrintWriter(\"log.txt\", \"UTF-8\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Public static method for accessing the instance\n    public static Logger getInstance() {\n        if (instance == null) {\n            instance = new Logger();\n        }\n        return instance;\n    }\n\n    // Public method for logging a message\n    public void log(String message) {\n        writer.println(message);\n    }\n\n    // Public method for closing the log file\n    public void close() {\n        writer.close();\n    }\n}\nIn this example, the Logger class defines a Logger() constructor that is private. This means that instances of the Logger class can only be created from within the Logger class itself.\nThe Logger class also defines a getInstance() method, which is marked as public and static. This method is used to access the instance of the Logger class, and to create the instance if it does not already exist.\nBecause the Logger class is a singleton, there can only be one instance of the class at any given time. This means that all instances of the Logger class share the same instance of the writer field, which is used to write messages to the log file.\nOverall, this example shows how the singleton pattern can be used to implement a Logger class in Java, which ensures that there is only one instance of the Logger class, and provides a global point of access to that instance. This allows the Logger class to manage shared resources, such as the log file, in a more efficient and effective way."
  },
  {
    "objectID": "javase/se-pattern-singleton.html#example-configurationmanager",
    "href": "javase/se-pattern-singleton.html#example-configurationmanager",
    "title": "Java Patterns: Singleton",
    "section": "Example: ConfigurationManager",
    "text": "Example: ConfigurationManager\nHere is another example of a singleton class in Java, using a ConfigurationManager class as an example:\npublic class ConfigurationManager {\n    // Private static instance of the class\n    private static ConfigurationManager instance = null;\n\n    // Private instance variables\n    private Properties config;\n\n    // Private constructor\n    private ConfigurationManager() {\n        try {\n            config = new Properties();\n            config.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Public static method for accessing the instance\n    public static ConfigurationManager getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManager();\n        }\n        return instance;\n    }\n\n    // Public method for getting a configuration property\n    public String getProperty(String key) {\n        return config.getProperty(key);\n    }\n}\nIn this example, the ConfigurationManager class defines a ConfigurationManager() constructor that is private. This means that instances of the ConfigurationManager class can only be created from within the ConfigurationManager class itself.\nThe ConfigurationManager class also defines a getInstance() method, which is marked as public and static. This method is used to access the instance of the ConfigurationManager class, and to create the instance if it does not already exist.\nBecause the ConfigurationManager class is a singleton, there can only be one instance of the class at any given time. This means that all instances of the ConfigurationManager class share the same instance of the config field, which is used to store the configuration properties.\nOverall, this example shows how the singleton pattern can be used to implement a ConfigurationManager class in Java, which ensures that there is only one instance of the ConfigurationManager class, and provides a global point of access to that instance. This allows the ConfigurationManager class to manage shared resources, such as the configuration properties, in a more efficient and effective way."
  },
  {
    "objectID": "javase/se-principles-abstraction.html",
    "href": "javase/se-principles-abstraction.html",
    "title": "Java SE: Abstraction",
    "section": "",
    "text": "📘 Abstraction\nAbstraction is the process of focusing on the essential characteristics of an object, while ignoring the non-essential details.\n\n\nIn other words, abstraction means representing the essential features of an object without including the non-essential details. In Java, abstraction is achieved through the use of abstract classes and interfaces.\nHere is an example of abstraction in Java:\npublic abstract class Account {\n    // This is an abstract class because it has an abstract method\n\n    public abstract void withdraw(double amount);\n\n    // Non-abstract methods\n    public void deposit(double amount) {\n        // Code for depositing money\n    }\n\n    public void checkBalance() {\n        // Code for checking account balance\n    }\n}\nIn this example, the Account class is an abstract class because it contains an abstract method called withdraw(). An abstract method is a method that is declared but not implemented. This means that subclasses of the Account class must implement the withdraw() method in order to use it."
  },
  {
    "objectID": "javase/se-principles-abstraction.html#abstract-class-and-interface",
    "href": "javase/se-principles-abstraction.html#abstract-class-and-interface",
    "title": "Java SE: Abstraction",
    "section": "Abstract class and Interface",
    "text": "Abstract class and Interface\nAbstraction is an important concept in object-oriented programming because it allows developers to create complex systems by building upon simpler components.\nThis makes it possible to manage large and complex code bases without becoming overwhelmed by the details.\n\n\n\n\n\n\nNote\n\n\n\n📘 How abstraction is done\nIn Java, abstraction is achieved through the use of abstract classes and interfaces.\n\n\n\nAn abstract class is a class that contains one or more abstract methods. An abstract method is a method that is declared but not implemented. This means that subclasses of the abstract class must implement the abstract methods in order to use them.\nHere is an example of an abstract class in Java:\npublic abstract class Shape {\n    // This is an abstract class because it has an abstract method\n\n    public abstract double getArea();\n\n    // Non-abstract methods\n    public void draw() {\n        // Code for drawing the shape\n    }\n\n    public void move(int x, int y) {\n        // Code for moving the shape\n    }\n}\nIn this example, the Shape class is an abstract class because it contains an abstract method called getArea(). Subclasses of the Shape class, such as Circle or Rectangle, must implement the getArea() method in order to use it. This allows each subclass to provide its own implementation of the getArea() method, based on its specific characteristics.\nInterfaces are another way to achieve abstraction in Java. An interface is a collection of abstract methods and constant variables. A class that implements an interface must implement all of the abstract methods and constant variables defined in the interface.\nHere is an example of an interface in Java:\npublic interface Shape {\n    // This is an interface because it has only abstract methods\n\n    double getArea();\n\n    void draw();\n\n    void move(int x, int y);\n\n    // Constant variable\n    int MAX_SIZE = 100;\n}\nIn this example, the Shape interface defines three abstract methods and one constant variable. Any class that implements the Shape interface must implement all of the abstract methods and provide a value for the constant variable. This allows the class to define its own implementation of the abstract methods, based on its specific characteristics.\nHere is an example of how to implement the Shape interface in Java with Circle class:\npublic class Circle implements Shape {\n    // Private instance variable\n    private double radius;\n\n    // Constructor\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    // Implementation of abstract method from Shape interface\n    @Override\n    public double getArea() {\n        return Math.PI * radius * radius;\n    }\n\n    // Implementation of abstract method from Shape interface\n    @Override\n    public void draw() {\n        // Code for drawing the circle\n    }\n\n    // Implementation of abstract method from Shape interface\n    @Override\n    public void move(int x, int y) {\n        // Code for moving the circle\n    }\n}\nIn this example, the Circle class implements the Shape interface. This means that the Circle class must implement all of the abstract methods defined in the Shape interface. The Circle class also has a private instance variable called radius, which is used to store the radius of the circle.\nThe Circle class provides its own implementation of the getArea() method, which calculates the area of the circle based on its radius. It also provides its own implementation of the draw() and move() methods, which are used to draw and move the circle on the screen.\nOverall, this example shows how to implement an interface in Java. By implementing the Shape interface, the Circle class can provide its own implementation of the abstract methods defined in the interface, based on its specific characteristics."
  },
  {
    "objectID": "javase/se-principles-abstraction.html#conclusion",
    "href": "javase/se-principles-abstraction.html#conclusion",
    "title": "Java SE: Abstraction",
    "section": "Conclusion",
    "text": "Conclusion\nOverall, abstraction is a powerful concept that allows developers to create complex systems by building upon simpler components. It helps to manage the complexity of large code bases by focusing on the essential features of objects, while ignoring the non-essential details."
  },
  {
    "objectID": "javase/se-principles-encapsulation.html",
    "href": "javase/se-principles-encapsulation.html",
    "title": "Java SE: Encapsulation",
    "section": "",
    "text": "📘 Encapsulation\nEncapsulation is the process of wrapping data and methods that operate on that data into a single unit. In other words, it is the process of hiding the implementation details of an object from the outside world.\nIn Java, encapsulation is achieved through the use of access modifiers like private, public, and protected.\n\n\nHere is an example of encapsulation in Java:\npublic class Account {\n    // Private instance variables\n    private double balance;\n\n    // Public methods\n    public void deposit(double amount) {\n        // Code for depositing money\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        // Code for withdrawing money\n        balance -= amount;\n    }\n\n    public void checkBalance() {\n        // Code for checking account balance\n        System.out.println(\"Current balance: \" + balance);\n    }\n}\n\nIn this example, the Account class has private instance variables and public methods. The balance variable is private, which means that it can only be accessed within the Account class. The deposit(), withdraw(), and checkBalance() methods are public, which means that they can be called from outside the Account class. This ensures that the implementation details of the Account class are hidden from the outside world."
  },
  {
    "objectID": "javase/se-principles-inheritance.html",
    "href": "javase/se-principles-inheritance.html",
    "title": "Java SE: Inherence",
    "section": "",
    "text": "📘 Inheritance\nInheritance is a fundamental concept in object-oriented programming. It is the process of creating new classes from existing classes.\nIn other words, it is the process of deriving new classes from existing classes, which allows developers to reuse and extend the functionality of existing classes.\n\n\nIn Java, inheritance is achieved through the use of the extends keyword. A class that extends another class is called a subclass, and the class it extends is called the superclass.\nThe subclass inherits all of the methods and fields of the superclass, and can also define its own methods and fields.\nHere is an example of inheritance in Java:\npublic class Animal {\n    // Private instance variable\n    private String name;\n\n    // Constructor\n    public Animal(String name) {\n        this.name = name;\n    }\n\n    // Getter method for the name variable\n    public String getName() {\n        return name;\n    }\n\n    // Method for making the animal make a noise\n    public void makeNoise() {\n        // Code for making the animal make a noise\n    }\n}\n\npublic class Dog extends Animal {\n    // Private instance variable\n    private int age;\n\n    // Constructor\n    public Dog(String name, int age) {\n        super(name);\n        this.age = age;\n    }\n\n    // Getter method for the age variable\n    public int getAge() {\n        return age;\n    }\n\n    // Method for making the dog bark\n    @Override\n    public void makeNoise() {\n        System.out.println(\"Woof!\");\n    }\n}\nn this example, the Animal class is a superclass, and the Dog class is a subclass that extends the Animal class. The Dog class inherits all of the methods and fields of the Animal class, including the name field and the makeNoise() method.\nThe Dog class also has its own age field, which is not defined in the Animal class. It also provides its own implementation of the makeNoise() method, which overrides the implementation in the Animal class. This allows the Dog class to define its own behavior for the makeNoise() method, based on its specific characteristics.\nOverall, this example shows how to use inheritance in Java. By extending the Animal class, the Dog class is able to reuse and extend the functionality of the Animal class, and define its own methods and fields. This allows the Dog class to inherit the characteristics of the Animal class, and add its own unique characteristics as well.\nHere is an example of how to create a Cat class in Java that extends the Animal class from the previous example:\npublic class Cat extends Animal {\n    // Private instance variable\n    private int age;\n\n    // Constructor\n    public Cat(String name, int age) {\n        super(name);\n        this.age = age;\n    }\n\n    // Getter method for the age variable\n    public int getAge() {\n        return age;\n    }\n\n    // Method for making the cat meow\n    @Override\n    public void makeNoise() {\n        System.out.println(\"Meow!\");\n    }\n}\nThe Cat class also has its own age field, which is not defined in the Animal class. It also provides its own implementation of the makeNoise() method, which overrides the implementation in the Animal class. This allows the Cat class to define its own behavior for the makeNoise() method, based on its specific characteristics."
  },
  {
    "objectID": "javase/se-principles-polymorphism.html",
    "href": "javase/se-principles-polymorphism.html",
    "title": "Java SE: Polymorphism",
    "section": "",
    "text": "📘 Polymorphism\nPolymorphism is a fundamental concept in object-oriented programming. It is the ability of an object to take on different forms.\nIn other words, it is the ability of a single object to behave differently in different contexts.\n\n\nPolymorphism is an important concept in object-oriented programming because it allows developers to write code that is more flexible and reusable. By using polymorphism, developers can write code that can operate on objects of different types, without knowing the specific type of the object in advance.\nIn Java, polymorphism is achieved through the use of inheritance and interfaces. A subclass can implement multiple interfaces, and an interface can be implemented by multiple classes. This allows objects of different types to share a common set of methods, which can be called on the objects without knowing their specific type.\nHere is an example of polymorphism in Java using the Animal, Dog, and Cat classes from the previous examples:\npublic class Main {\n    public static void main(String[] args) {\n        // Create a Dog object\n        Dog dog = new Dog(\"Buddy\", 5);\n\n        // Create a Cat object\n        Cat cat = new Cat(\"Whiskers\", 3);\n\n        // Call the makeNoise() method on the Dog object\n        dog.makeNoise();\n\n        // Call the makeNoise() method on the Cat object\n        cat.makeNoise();\n    }\n}\nIn this example, the Dog class and the Cat class both implement the Animal class, which defines the makeNoise() method. This means that the Dog and Cat classes both have their own implementations of the makeNoise() method.\nWhen the makeNoise() method is called on the dog object, it executes the implementation in the Dog class, which prints the “Woof!” message to the console. When the makeNoise() method is called on the cat object, it executes the implementation in the Cat class, which prints the “Meow!” message to the console."
  },
  {
    "objectID": "javase/se-principles-polymorphism.html#conclusion",
    "href": "javase/se-principles-polymorphism.html#conclusion",
    "title": "Java SE: Polymorphism",
    "section": "Conclusion",
    "text": "Conclusion\nOverall, this example shows how polymorphism allows objects of different types to share a common set of methods, and to execute different implementations of those methods based on their specific type. This allows the code to be more flexible and reusable, because it can operate on objects of different types without knowing their specific type in advance."
  },
  {
    "objectID": "javase/se-what-basics.html",
    "href": "javase/se-what-basics.html",
    "title": "Java Standard Edition: Basics",
    "section": "",
    "text": "📘 Java SE\nJava is a high-level, class-based, object-oriented and general-purpose programming language and computing platform intended to let programmers write once, run anywhere (WORA). The type system is static, strong and safe.\nIt is widely used for developing applications for web, mobile, and desktop environments. Java is known for its reliability and security, making it a perfect choice for developing enterprise-level applications, that is JEE (Java Enterprise Edition)."
  },
  {
    "objectID": "javase/se-what-basics.html#java-se",
    "href": "javase/se-what-basics.html#java-se",
    "title": "Java Standard Edition: Basics",
    "section": "Java SE",
    "text": "Java SE\n\n\n\nJava SE and Java EE - Sergelucas, CC BY-SA 3.0, via Wikimedia Commons\n\n\nJava SE (Java Platform, Standard Edition) is a set of libraries, tools, and technologies that provide a complete environment for developing and deploying Java-based applications. Java SE includes the:\n\nJava Development Kit (JDK), which contains the tools and libraries necessary for developing and running Java programs,\nas well as the Java Runtime Environment (JRE), which is used to run Java programs on a computer.\n\nJava SE also includes a set of standard libraries, which provide a wide range of functionality, including basic input/output, networking, security, and graphical user interface (GUI) components.\nava SE is the core platform for Java-based software development, and is used by millions of developers around the world to create a wide variety of applications, from desktop and mobile applications to enterprise-level systems."
  },
  {
    "objectID": "javase/se-what-basics.html#programming-steps",
    "href": "javase/se-what-basics.html#programming-steps",
    "title": "Java Standard Edition: Basics",
    "section": "Programming steps",
    "text": "Programming steps\n\n\n\nJava Programming Steps\n\n\nhe steps in writing a Java program is illustrated as above:\n\nWrite the source code Person.java.\nCompile the source code Person.java into Java portable bytecode (or machine code) Person.class using the JDK’s Java compiler by issuing the command javac Person.java.\nRun the compiled bytecode Person.class, using the JDK’s Java Runtime by issuing the command java Person.."
  },
  {
    "objectID": "javase/se-what-basics.html#type-system",
    "href": "javase/se-what-basics.html#type-system",
    "title": "Java Standard Edition: Basics",
    "section": "Type system",
    "text": "Type system\n\nSafe: Java’s type system helps to prevent errors by ensuring that values stored in variables are always of the correct type. This helps to avoid type-related runtime errors and makes Java programs more reliable.\nStatic: Java is a statically-typed language, which means that the type of a variable is determined at compile time, rather than at runtime. This allows the Java compiler to catch type errors before the program is executed, making it easier to find and fix errors in your code.\nStrong: Java has a strong type system, which means that type conversions (also known as typecasting) between different types are not allowed unless they are explicitly specified by the programmer. This helps to prevent unintended type errors and makes Java programs more predictable and easier to understand."
  },
  {
    "objectID": "javase/se-what-basics.html#and-..-what-is-jee",
    "href": "javase/se-what-basics.html#and-..-what-is-jee",
    "title": "Java Standard Edition: Basics",
    "section": "And .. what is JEE?",
    "text": "And .. what is JEE?\n\n\n\n\n\n\nJava EE\n\n\n\nJEE (Java Platform, Enterprise Edition) is a collection of technologies and standards for building enterprise-level applications using the Java programming language.\n\n\nEE provides a set of APIs and tools for developing distributed, transactional, and secure Java applications that can run on a variety of devices and environments, including web and mobile.\nJEE is often used for building large-scale, complex, and mission-critical applications in industries such as finance, healthcare, and e-commerce.\nJava Vocabulary"
  },
  {
    "objectID": "javase/se-what-moochelsinki.html",
    "href": "javase/se-what-moochelsinki.html",
    "title": "Java MOOC Helsinki",
    "section": "",
    "text": "Java MOOC Programming University of Helsinki\n\n\nWelcome to the University of Helsinki’s free massive open online course (MOOC) on programming! This is an updated version of our popular course Object-Oriented Programming with Java.\nDuring this course, you will learn the basics of computer programming, along with algorithms and object-oriented programming through the Java programming language. The course includes comprehensive materials and plenty of programming exercises - all of which are tested using our automatic testing service Test My Code."
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#target",
    "href": "javase/se-what-moochelsinki.html#target",
    "title": "Java MOOC Helsinki",
    "section": "Target",
    "text": "Target\nAnyone can join - no previous programming knowledge is required.\nUnlike many programming courses found online, ours is completely unabridged; the course’s scope and material are identical to our CS1 Introduction to Programming and Advanced Programming courses.\nThis is the first course in our computer science learning track, and we use industry-grade tooling from day one. As such, the course is about programming in a real integrated development environment (IDE) instead of a browser or an educational IDE.\nThe course does not require separate registration. You can simply dive into the first part of the course found over here."
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#course-contents",
    "href": "javase/se-what-moochelsinki.html#course-contents",
    "title": "Java MOOC Helsinki",
    "section": "Course Contents",
    "text": "Course Contents\nThe course is split up into two individual courses:\n\nJava Programming I\nand Java Programming II\n\nEach course consists of seven parts, each with its own exercise set. Completing a single part takes approximately 5-20 hours, and we recommend reserving at least 10 hours per part, depending on prior skills with computers."
  },
  {
    "objectID": "javase/se-what-principles.html",
    "href": "javase/se-what-principles.html",
    "title": "Java Standard Edition: Principles",
    "section": "",
    "text": "Java SE Basic Principles OOP\n\n\nObject-oriented programming (OOP) is a programming paradigm that is based on the concepts of objects and classes, which can contain data and code that manipulates that data. OOP is based on several key principles, including the following:\n\nEncapsulation: Encapsulation refers to the idea of combining data and the code that manipulates that data into a single unit, or object. This allows for better organization and modularity of code, and helps to hide the internal details of an object from other parts of the program.\nAbstraction: Abstraction is the process of representing essential features without including the details. In OOP, abstraction is often achieved through the use of interfaces or abstract classes, which define a set of common methods that can be implemented by different classes in different ways. This allows for greater flexibility and reusability of code.\nInheritance: Inheritance is the ability of a class to inherit the attributes and behaviors of another class. In OOP, a class can inherit from a parent class, also known as a superclass, and can override or extend the methods of the parent class to add new functionality. This allows for code reuse and makes it easier to create hierarchies of classes.\nPolymorphism: Polymorphism is the ability of an object to take on multiple forms. In OOP, polymorphism allows for the use of a single interface to refer to objects of different types. This allows for greater flexibility and code reuse, as the same method can be used on objects of different types and the appropriate implementation will be called based on the type of the object.\n\nOverall, the principles of encapsulation, abstraction, inheritance, and polymorphism are fundamental to OOP and form the basis for many of its benefits, such as modularity, flexibility, code reuse, and ease of maintenance.\n\n\n\n\n\nExample object in Java\n\n\n\n📘 Object-oriented programming (OOP)\nIn object-oriented programming (OOP), an object is a self-contained unit that combines data and the code that manipulates that data.\nAn object is a data structure that contains:\n\nattributes, or properties, that describe the object, defines the state’s object\nand methods, or functions, that define the behavior of the object.\n\n\n\nObjects can interact with each other by sending and receiving messages, or method calls, to access and modify their data.\nObjects are created from classes, which are templates that define the structure and behavior of objects.\nIn Java, objects are created using the new keyword, and their attributes and methods can be accessed using the dot (.) operator. Objects are an important concept in OOP and are central to many of its benefits, such as modularity, code reuse, and flexibility.\n\nPerson carla = new Person(\"Carla\", 21, \"red hair\", 45.000);\n\n\n\nIn object-oriented programming (OOP):\n\nThe constructor is a special type of method that is used to create and initialize an object. In Java, a constructor is a method that has the same name as the class and is used to create an instance of the class. A constructor can take arguments, which are used to initialize the object’s attributes, or properties.\nThe state of an object refers to the values of its attributes at a given moment in time.\nThe behavior of an object refers to the actions or operations that it can perform. In Java, the behavior of an object is defined by its methods, which are functions that are associated with the object and can be called to perform actions on the object.\n\nOverall, a constructor, state, and behavior are important concepts in OOP and are closely related.\nA constructor is used to create and initialize an object, and its state and behavior are defined by its attributes and methods, respectively. In Java SE, these concepts are central to the creation and use of objects, and are fundamental to the flexibility and power of the Java language."
  },
  {
    "objectID": "javase/selab1-1.html",
    "href": "javase/selab1-1.html",
    "title": "Lab#SE01-1: Maven/Gradle Person and Account",
    "section": "",
    "text": "Create a Maven/Gradle Java SE Project with three classes and Junit to test objects and operations.\n\n\n\n\n\n\nContext Goal Tasks Optional\n\n\n\n\n\n\nIn order to complete this project, you will need to have a basic understanding of the Java programming language, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\n\n\nAdditionally, you will need to have some knowledge of algorithms and data structures to implement the required classes.\n\n\nOverall, this project will provide an opportunity for you to learn and apply the basics of Java programming, as well as gain experience with Maven or Gradle, JUnit, and user input via the console.\n\n\nBy completing this project, you will have a starting foundation in these technologies and be able to build more complex and sophisticated Java applications in the future. You may go to Lab 2 (go Lab#SE01-2)\n\n\n\n\n\n\nThe goal of this project is to create three classes in Java (Person, Account and Manager) that implement different algorithms or data structures, and to test them using JUnit.  These classes could include, for example, creating new objects, a data structure for storing and manipulating data, or a utility class for performing common operations.\n\n\n\n\n\n\nThe tasks involved in this project include: \n\n\nCreating a new Maven or Gradle project and setting up the project structure.\n\n\nModifying the project’s pom.xml or build.gradle file to import the necessary dependencies, including JUnit for testing.\n\n\nImplementing the three required classes in Java, using appropriate algorithms and data structures.\n\n\nImplementing as well two basic pattern-designs: singleton and think about factory.\n\n\nWriting JUnit tests to verify that the classes work as expected.\n\n\n\nYou may attach the JUnit Test HTML results to documentation.\n\n\n\n\n\n\nAs an optional task, you could also consider allowing the user to input data via the console, rather than using hard-coded test data in your JUnit tests.  This would allow you to test the classes with a variety of different input data, and to interact with the classes in a more dynamic way."
  },
  {
    "objectID": "javase/selab1-1.html#solving-discussion",
    "href": "javase/selab1-1.html#solving-discussion",
    "title": "Lab#SE01-1: Maven/Gradle Person and Account",
    "section": "Solving discussion",
    "text": "Solving discussion\n\nBase Classes\nHere, the Person class represents a person with a name, address and others. In the same way, Account class is a bank account. The AccountManager class contains static methods to perform withdrawal, transfer, and change pin operations on a Person and Account object.\npublic class Person {\n  private String name;\n  private String address;\n  // Other properties for a Person...\n\n  public Person(String name, String address) {\n    this.name = name;\n    this.address = address;\n  }\n\n  // Getters and setters for Person properties...\n}\n\n\npublic class Account {\n  private String accountNumber;\n  private String pin;\n  private double balance;\n  // Other properties for an Account...\n\n  public Account(String accountNumber, String pin, double balance) {\n    this.accountNumber = accountNumber;\n    this.pin = pin;\n    this.balance = balance;\n  }\n\n  // Getters and setters for Account properties...\n}\n\npublic class AccountManager {\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount > 0 && amount <= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount > 0 && amount <= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}\n\n\nPerson has Account\npublic class Person {\n  private String name;\n  private String surname;\n  private int age;\n  private Account account;\n\n  public Person(String name, String surname, int age, Account account) {\n    this.name = name;\n    this.surname = surname;\n    this.age = age;\n    this.account = account;\n  }\n\n  public Account getAccount() {\n    return this.account;\n  }\n\n  public void setAccount(Account account) {\n    this.account = account;\n  }\n   // Getters and setters for Account properties...\n}\n\nUML Class Diagram\n\n\n\n\n\nclassDiagram\n\nclass Person {\n  -name: String\n  -surname: String\n  -age: int\n  -account: Account\n}\n\nclass Account {\n  -accountNumber: String\n  -pin: int\n  -balance: double\n}\n\nPerson *-- Account\n\n\n\n\n\n\n\n\n\n\n\n\nUML Sequence Diagram\n\n\n\n\n\nsequenceDiagram\n\nparticipant AccountManager as AccountManager\nparticipant Account as Account\nparticipant Person as Person\n\nAccountManager->>Person: transfer(amount, sender, receiver)\nPerson->>Account: updateBalance(-amount, sender)\nPerson->>Account: updateBalance(-amount, receiver)\nAccount-->>Person: transferDone(receipt)\nPerson-->>AccountManager: transferDone(receipt)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSingleton\nTo use the Singleton design pattern with a Person and Account class, you could create a singleton AccountManager class that manages the creation and operations of the Person and Account objects.\nThe AccountManager class would have a private constructor, to prevent multiple instances from being created, and a static getInstance method that returns the singleton instance of the class.\nThe AccountManager class would then have methods for performing various operations on the Person and Account objects, such as transferring money between accounts, withdrawing money from an account, or changing the PIN for an account.\nThese methods would be implemented using the Person and Account classes, and would be accessible to other classes through the singleton AccountManager instance.\nFor example, you could define the AccountManager, Person, and Account classes as follows:\npublic class AccountManager {\n  private static AccountManager instance;\n  private Person person;\n  private Account account;\n\n  private AccountManager() {\n    // Private constructor to prevent multiple instances\n  }\n\n  public static AccountManager getInstance() {\n    if (instance == null) {\n      instance = new AccountManager();\n    }\n    return instance;\n  }\n\n  public void transfer(Account from, Account to, double amount) {\n    // Transfer money from one account to another\n  }\n\n  public void withdraw(Account account, double amount) {\n    // Withdraw money from an account\n  }\n\n  public void changePin(Account account, String newPin) {\n    // Change the PIN for an account\n  }\n\n  // Other methods for managing Person and Account objects...\n}\nTo use the AccountManager class, other classes would simply need to call the getInstance method to obtain the singleton instance of the class, and then use the instance’s methods to perform operations on the Person and Account objects. For example:\n// Create a new Person and Account\nAccountManager manager = AccountManager.getInstance();\nmanager.person = new Person(\"John Doe\", \"123 Main St.\");\nmanager.person = new Person(\"Carla Jameson\", \"323 Main St.\");\nmanager.person = new Person(\"Rafael Martin\", \"3 Glorious St.\");\nmanager.person = new Person(\"Pau Vila\", \"63 Sesamo St.\");"
  },
  {
    "objectID": "javase/selab1-1.html#step-by-step",
    "href": "javase/selab1-1.html#step-by-step",
    "title": "Lab#SE01-1: Maven/Gradle Person and Account",
    "section": "Step-by-step",
    "text": "Step-by-step\n\nCreate Maven Project with JUnit\nCreate Person class\nCreate Account class\nTest Person and Account objects\nWrite operations (withdrawal, transfer,change pin) as a static methods in AccountManager\nTest Person and Account objects and operations\nAdd singleton pattern to AccountManager class\nTest AccountManager class"
  },
  {
    "objectID": "javase/selab1-2.html",
    "href": "javase/selab1-2.html",
    "title": "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON",
    "section": "",
    "text": "Create a Maven/Gradle Java SE Project with three classes and Junit to test objects and operations. From here you should add new features: factory pattern, JSON parser and save this JSON on local storage."
  },
  {
    "objectID": "javase/selab1-2.html#solving-discussion",
    "href": "javase/selab1-2.html#solving-discussion",
    "title": "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON",
    "section": "Solving discussion",
    "text": "Solving discussion\n\nBase Classes: factory\nHere is an example of how you could create a Lombok Java class for a Person and Account using the factory pattern:\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Person {\n    private String firstName;\n    private String lastName;\n}\n\npublic interface Account {\n    void deposit(double amount);\n    void withdraw(double amount);\n}\n\n\npublic class SavingsAccount implements Account {\n    private double balance;\n\n    public SavingsAccount(double balance) {\n        this.balance = balance;\n    }\n\n    @Override\n    public void deposit(double amount) {\n        this.balance += amount;\n    }\n\n    @Override\n    public void withdraw(double amount) {\n        this.balance -= amount;\n    }\n}\n\npublic class CheckingAccount implements Account {\n    private double balance;\n\n    public CheckingAccount(double balance) {\n        this.balance = balance;\n    }\n\n    @Override\n    public void deposit(double amount) {\n        this.balance += amount;\n    }\n\n    @Override\n    public void withdraw(double amount) {\n        this.balance -= amount;\n    }\n}\n\npublic class AccountManager {\n    public static Account createAccount(String accountType, double balance) {\n        if (accountType.equalsIgnoreCase(\"savings\")) {\n            return new SavingsAccount(balance);\n        } else if (accountType.equalsIgnoreCase(\"checking\")) {\n            return new CheckingAccount(balance);\n        }\n        return null;\n    }\n}\nYou can then use these classes as follows:\nPerson john = new Person(\"John\", \"Doe\");\nAccount savingsAccount = AccountManager.createAccount(\"savings\", 100.00);\nAccount checkingAccount = AccountManager.createAccount(\"checking\", 50.00);\nThe AccountManager class uses the factory pattern to create Account objects based on the specified accountType. This allows you to create different types of accounts without having to specify the exact class to use, and makes it easier to add new types of accounts in the future.\n\n\nBase Classes: local storage-JSON\nHere is an example of what a Lombok-based Person class and Account class might look like in Java:\nimport lombok.Data;\n\n@Data\npublic class Person {\n  private String name;\n  private int age;\n  private String address;\n}\n\n@Data\npublic class Account {\n  private int accountNumber;\n  private double balance;\n  private Person owner;\n}\nThe @Data annotation is a **Lombok* annotation that automatically generates getters and setters for all non-static fields, as well as equals(), hashCode(), and toString() methods. This can help reduce boilerplate code and make your classes more concise and readable.\nTo save data to a local JSON file, you could use a JSON library like Jackson to convert the objects to JSON strings, and then write those strings to a file. Here is an example of how you might do that:\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class AccountManager {\n  private ObjectMapper objectMapper = new ObjectMapper();\n\n  public void saveAccount(Account account) throws JsonProcessingException {\n    String json = objectMapper.writeValueAsString(account);\n    // write the JSON string to a file\n  }\n}\nHow to save an object as a JSON string to a file on your local storage (in this case, c:/data/accounts.json) using Java SE:\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class AccountManager {\n  private ObjectMapper objectMapper = new ObjectMapper();\n\n  public void saveAccount(Account account) throws JsonProcessingException, IOException {\n    String json = objectMapper.writeValueAsString(account);\n\n    FileWriter fileWriter = new FileWriter(\"c:/data/accounts.json\");\n    fileWriter.write(json);\n    fileWriter.close();\n  }\n}"
  },
  {
    "objectID": "javase/selab1-2.html#step-by-step",
    "href": "javase/selab1-2.html#step-by-step",
    "title": "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON",
    "section": "Step-by-step",
    "text": "Step-by-step\n\nCreate interface Account\nCreate subclasses SavingsAccount and CheckingAccount\nCreate AccountManger\nCheck factory\nParse Account objects to String-JSON\nSave String on local .json file"
  },
  {
    "objectID": "javase/selab3.html",
    "href": "javase/selab3.html",
    "title": "Lab 3: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/selab4.html",
    "href": "javase/selab4.html",
    "title": "Lab 4: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/selab5.html",
    "href": "javase/selab5.html",
    "title": "Lab 5: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "linux/linux-what-basics.html",
    "href": "linux/linux-what-basics.html",
    "title": "Linux: basic concepts",
    "section": "",
    "text": "📘 Linux\nLinux is a free and open-source operating system. It is a Unix-like operating system that is based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds. Linux is commonly used in web servers, smartphones, and other devices where reliability, security, and performance are important."
  },
  {
    "objectID": "linux/linux-what-basics.html#basic-commands",
    "href": "linux/linux-what-basics.html#basic-commands",
    "title": "Linux: basic concepts",
    "section": "Basic commands",
    "text": "Basic commands\nHere are some basic terminal commands that can be used in Linux Mint:\n\npwd: Print the name of the current working directory (i.e., show the full path to the current directory)\nls: List the contents of the current directory\ncd: Change the current working directory\nmkdir: Create a new directory\nrmdir: Remove an empty directory\ntouch: Create a new file or update the timestamp of an existing file\ncp: Copy a file or directory\nmv: Move or rename a file or directory\nrm: Remove a file\nman: Display the manual page for a command\nsudo: Run a command with superuser privileges\napt-get is a command-line utility for managing packages in the Linux operating system. It is used to install, update, and remove packages from the system. apt-get is part of the Advanced Packaging Tool (APT) system, which is used to manage software packages in the Debian and Ubuntu Linux distributions.\n\nThese are just a few examples of the many commands that are available in Linux. To learn more about a specific command, you can use the man command to view its manual page.\nFor example, to learn more about the ls command, you could type man ls in the terminal."
  },
  {
    "objectID": "linux/linux-what-vm.html",
    "href": "linux/linux-what-vm.html",
    "title": "Linux: Virtual Machines",
    "section": "",
    "text": "A virtual machine is a software program that emulates the functionality of a physical computer.\nIt allows a computer to run multiple operating systems and applications in isolated environments, providing a level of isolation and security between them.\nThis allows users to run different operating systems and applications on the same physical computer, providing a level of flexibility and convenience that is not possible with a physical computer."
  },
  {
    "objectID": "linux/linux-what-vm.html#what-is-virtualbox",
    "href": "linux/linux-what-vm.html#what-is-virtualbox",
    "title": "Linux: Virtual Machines",
    "section": "What is Virtualbox",
    "text": "What is Virtualbox\nVirtualBox is a free and open-source virtualization platform that allows users to run multiple operating systems on a single physical computer.\nIt is a type of hypervisor, which means it sits between the physical hardware and the operating system, allowing multiple operating systems to run on the same hardware.\nVirtualBox allows users to create and manage virtual machines, each of which can run a different operating system and be configured with its own virtual hardware. This allows users to run multiple operating systems and applications on the same computer, providing a level of flexibility and convenience that is not possible with a physical computer."
  },
  {
    "objectID": "linux/linux-what-vm.html#step-by-step-linux-mint",
    "href": "linux/linux-what-vm.html#step-by-step-linux-mint",
    "title": "Linux: Virtual Machines",
    "section": "Step-by-step: Linux Mint",
    "text": "Step-by-step: Linux Mint\nHere are the steps to create a Linux Mint virtual machine using VirtualBox:\n\nDownload and install VirtualBox on your computer.\nStart VirtualBox and click the New button to create a new virtual machine.\nIn the Create Virtual Machine wizard, give your virtual machine a name and select Linux as the operating system type and Mint as the version.\nSelect the amount of memory (RAM) you want to allocate to the virtual machine and click Next.\nSelect Create a virtual hard disk now and click Create.\nIn the Create a virtual hard disk wizard, select VDI (VirtualBox Disk Image) as the disk type and Dynamically allocated as the storage type.\nSelect the location where you want to store the virtual disk and the size of the disk, and click Create.\nClick on the new virtual machine in the list and click the Start button to boot the virtual machine.\nIn the select start-up disk window, select the Linux Mint ISO file that you previously downloaded from Linux Mint 21 “Vanessa” and click Start. 9.1. If not, manually select ISO to Controller:IDE>Optic unit>Choose file\nFollow the on-screen instructions to install Linux Mint on the virtual machine.\nRemove the iso from the Controller:IDE>Optic unit>Choose file.\nOnce the installation is complete, you can use the virtual machine to run Linux Mint and any applications that are compatible with the operating system. You can also customize the virtual machine’s settings and virtual hardware to suit your needs.\nInstall Guest Additions: 13.1. How to Install VirtualBox Guest Additions in Linux Mint 19.1 by Linux Distro Installation Guide"
  },
  {
    "objectID": "markup/markupcss.html",
    "href": "markup/markupcss.html",
    "title": "Cascade Style Sheet",
    "section": "",
    "text": "Cascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.\nCSS is among the core languages of the open web and is standardized across Web browsers according to W3C specifications. Previously, the development of various parts of CSS specification was done synchronously, which allowed the versioning of the latest recommendations. You might have heard about CSS1, CSS2.1, or even CSS3. There will never be a CSS3 or a CSS4; rather, everything is now CSS without a version number.\nAfter CSS 2.1, the scope of the specification increased significantly and the progress on different CSS modules started to differ so much, that it became more effective to develop and release recommendations separately per module. Instead of versioning the CSS specification, W3C now periodically takes a snapshot of the latest stable state of the CSS specification and individual modules progress. CSS modules now have version numbers, or levels, such as CSS Color Module Level 5.\nreference: CSS: Cascading Style Sheets"
  },
  {
    "objectID": "markup/markupcss.html#starting-with-some-html",
    "href": "markup/markupcss.html#starting-with-some-html",
    "title": "Cascade Style Sheet",
    "section": "Starting with some HTML",
    "text": "Starting with some HTML\nOur starting point is an HTML document. You can copy the code from below if you want to work on your own computer. Save the code below as index.html in a folder on your machine.\nReference: Starting with some HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Getting started with CSS</title>\n  </head>\n\n  <body>\n    <h1>I am a level one heading</h1>\n\n    <p>\n      This is a paragraph of text. In the text is a\n      <span>span element</span> and also a\n      <a href=\"https://example.com\">link</a>.\n    </p>\n\n    <p>\n      This is the second paragraph. It contains an <em>emphasized</em> element.\n    </p>\n\n    <ul>\n      <li>Item <span>one</span></li>\n      <li>Item two</li>\n      <li>Item <em>three</em></li>\n    </ul>\n  </body>\n</html></code>"
  },
  {
    "objectID": "markup/markupcss.html#adding-css-to-our-document",
    "href": "markup/markupcss.html#adding-css-to-our-document",
    "title": "Cascade Style Sheet",
    "section": "Adding CSS to our document",
    "text": "Adding CSS to our document\nTo link styles.css to index.html, add the following line somewhere inside the <head> of the HTML document:\n<link rel=\"stylesheet\" href=\"styles.css\" />\nThis <link> element tells the browser that we have a stylesheet, using the rel attribute, and the location of that stylesheet as the value of the href attribute. You can test that the CSS works by adding a rule to styles.css. Using your code editor, add the following to your CSS file:\n<link rel=\"stylesheet\" href=\"styles.css\" />\nTo target all paragraphs in the document, you would use the selector p. To turn all paragraphs green, you would use:\np {\n  color: green;\n}\nYou can target multiple selectors at the same time by separating the selectors with a comma. If you want all paragraphs and all list items to be green, your rule would look like this:\np,\nli {\n  color: green;\n}"
  },
  {
    "objectID": "markup/markupdown.html",
    "href": "markup/markupdown.html",
    "title": "Markdown Markup",
    "section": "",
    "text": "📘 Markdown\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents.\nCreated by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages.\n\n\nMarkdown Guide getting started\nUsing Markdown is different than using a WYSIWYG editor. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different.\nFor example, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., this text is bold). It may take a while to get used to seeing Markdown syntax in your text, especially if you’re accustomed to WYSIWYG applications. The screenshot below shows a Markdown file displayed in the Visual Studio Code text editor."
  },
  {
    "objectID": "markup/markupdown.html#how-does-it-work",
    "href": "markup/markupdown.html#how-does-it-work",
    "title": "Markdown Markup",
    "section": "How Does it Work?",
    "text": "How Does it Work?\nDillinger makes writing in Markdown easy because it hides the stuff happening behind the scenes, but it’s worth exploring how the process works in general.\nWhen you write in Markdown, the text is stored in a plaintext file that has an .md or .markdown extension. But then what? How is your Markdown-formatted file converted into HTML or a print-ready document?\nThe short answer is that you need a Markdown application capable of processing the Markdown file. There are lots of applications available — everything from simple scripts to desktop applications that look like Microsoft Word. Despite their visual differences, all of the applications do the same thing. Like Dillinger, they all convert Markdown-formatted text to HTML so it can be displayed in web browsers.\n\n\n\n\n\n\nMarkdown processor\n\n\n\nMarkdown applications use something called a Markdown processor (also commonly referred to as a “parser” or an “implementation”) to take the Markdown-formatted text and output it to HTML format. At that point, your document can be viewed in a web browser or combined with a style sheet and printed. You can see a visual representation of this process below.\n\n\n\n\n\n\n\n\nMarkdown app\n\n\n\nThe Markdown application and processor are two separate components. For the sake of brevity, I’ve combined them into one element (“Markdown app”) in the figure below. The Markdown Process\n\n\n\n\n\nHow Does it Work?\n\n\nTo summarize, this is a four-part process:\n\nCreate a Markdown file using a text editor or a dedicated Markdown application. The file should have an .md or .markdown extension.\nOpen the Markdown file in a Markdown application.\nUse the Markdown application to convert the Markdown file to an HTML document.\nView the HTML file in a web browser or use the Markdown application to convert it to another file format, like PDF.\n\nFrom your perspective, the process will vary somewhat depending on the application you use. For example, Dillinger essentially combines steps 1-3 into a single, seamless interface — all you have to do is type in the left pane and the rendered output magically appears in the right pane. But if you use other tools, like a text editor with a static website generator, you’ll find that the process is much more visible."
  },
  {
    "objectID": "markup/markupdown.html#markdown-flavours",
    "href": "markup/markupdown.html#markdown-flavours",
    "title": "Markdown Markup",
    "section": "Markdown Flavours",
    "text": "Markdown Flavours\n\nMarkdown: The original Markdown syntax, developed by John Gruber.\nCommonMark: A standardized and highly-specified variant of Markdown, intended to be more predictable and consistent across implementations.\nGitHub Flavored Markdown: An extension of Markdown with additional features and syntax, used by GitHub for rendering Markdown in its platform.\nGitLab Flavored Markdown: An extension of Markdown with additional features and syntax, used by GitLab for rendering Markdown in its platform.\nReadme: A Markdown-based documentation format with support for features such as table of contents and automatic linking, used by many open-source projects.\nObsidian: A Markdown-based note-taking and organizing tool, with support for linking and organizing notes using graphs and diagrams."
  },
  {
    "objectID": "markup/markuphtml.html",
    "href": "markup/markuphtml.html",
    "title": "HTML Markup",
    "section": "",
    "text": "HTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page’s appearance/presentation (CSS) or functionality/behavior (JavaScript).\n\n\n“Hypertext” refers to links that connect web pages to one another, either within a single website or between websites. Links are a fundamental aspect of the Web. By uploading content to the Internet and linking it to pages created by other people, you become an active participant in the World Wide Web.\nHTML uses “markup” to annotate text, images, and other content for display in a Web browser. HTML markup includes special “elements” such as\n<head>, <title>, <body>, <header>, <footer>, <article>, <section>, <p>, \n<div>, <span>, <img>, <aside>, <audio>, <canvas>, <datalist>, <details>,\n<embed>, <nav>, <output>, <progress>, <video>, <ul>, <ol>, <li>\nand many others.\nAn HTML element is set off from other text in a document by tags, which consist of the element name surrounded by < and >. The name of an element inside a tag is case insensitive. That is, it can be written in uppercase, lowercase, or a mixture. For example, the <title> tag can be written as <Title>, <TITLE>, or in any other way. However, the convention and recommended practice is to write tags in lowercase.\nReference: HyperText Markup Language"
  },
  {
    "objectID": "markup/markuphtml.html#anatomy-of-an-html-document",
    "href": "markup/markuphtml.html#anatomy-of-an-html-document",
    "title": "HTML Markup",
    "section": "Anatomy of an HTML document",
    "text": "Anatomy of an HTML document\nIndividual HTML elements aren’t very useful on their own. Next, let’s examine how individual elements combine to form an entire HTML page:\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>My test page</title>\n  </head>\n  <body>\n    <p>This is my page</p>\n  </body>\n</html>\nAnatomy of an HTML document"
  },
  {
    "objectID": "markup/markuphtmlrelation.html",
    "href": "markup/markuphtmlrelation.html",
    "title": "Markdown and HTML working together, good idea?",
    "section": "",
    "text": "📘 Markdown and HTML\nOverall, it is generally best to avoid mixing HTML and Markdown in the same document, unless you are confident that you can do so without introducing errors or inconsistencies.\nInstead, it is often better to use one language exclusively, and to use the appropriate syntax and formatting for that language"
  },
  {
    "objectID": "markup/markuphtmlrelation.html#problems",
    "href": "markup/markuphtmlrelation.html#problems",
    "title": "Markdown and HTML working together, good idea?",
    "section": "Problems",
    "text": "Problems\n\nDisplay: If the HTML and Markdown are not properly formatted or nested, the resulting document may not be readable or display correctly. This can lead to confusion for readers and make the document difficult to understand.\nMaintain: Mixing HTML and Markdown can make it difficult to maintain the document, as changes to one language may affect the other. This can result in errors and inconsistencies, and make it more challenging to update the document over time.\nIncompatibilities: Different Markdown parsers and HTML renderers may have different interpretations of the mixed language, leading to differences in how the document is displayed or interpreted. This can cause confusion for readers and make it difficult to ensure that the document is consistently displayed across different platforms."
  },
  {
    "objectID": "markup/markuphtmlrelation.html#example-creating-navigation-tabs",
    "href": "markup/markuphtmlrelation.html#example-creating-navigation-tabs",
    "title": "Markdown and HTML working together, good idea?",
    "section": "Example: creating navigation TABs",
    "text": "Example: creating navigation TABs\n\nApproach #1: MD + CSS\n\n\n\n\n\n\nLab#01-1: Publishing website by Quarto engine\n\n\n\n\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\nBefore\n\nStudents will need to have a basic understanding of web development, including HTML, CSS, and JavaScript.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\nGoal\n\nIn this project, students will be required to create a web application using HTML, CSS, and JavaScript. They will also need to understand and use Markdown to format their project’s documentation. Additionally, they will need to use GitHub and Visual Code to manage their project’s code and collaborate with their peers.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\nTasks\n\nIn the first part of the project, students will create a basic web page using markdown and publish it on Github repository using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\nIn the second part of the project, students will learn how to publish their website on gh-pages, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\nOptional\n\nAs an optional study, students may also want to learn about using callouts in their markdown documentation. The following links provide useful information on the topic:\n\nmarkdown-callouts\nCallout Blocks Quarto\nGetting Started with RDMD\nDivs and spans\ncodepen.io HTML+CSS\n\nUsing callouts, links, tabs and CSS can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.\nTo take their project to the next level, students may also choose to connect to an API (Application Programming Interface) to retrieve data and render charts using JavaScript. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n\nQuarto data sources\n\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\nAfter\n\nThe Quarto website project is a great opportunity for students to develop their skills in web development, markdown, and version control using GitHub and Visual Code.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n\n\n\n\n\n\n\n\nMarkdown callouts with calls to CSS classes\n\n\n\n\n\n::: {.callout-info icon=false  collapse=\"false\"}\n## Lab 1: Publishing website by Quarto engine\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n::: {.tab-content #before}\n### Before\n>Students will need to have a **basic understanding of web development**, including HTML, CSS, and JavaScript.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #goal}\n### Goal\n>In this project, students will be required to create a **web application using HTML, CSS, and JavaScript**. They will also need to understand and use **Markdown to format their project's documentation**. Additionally, they will need to use GitHub and Visual Code to manage their project's code and collaborate with their peers.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #tasks}\n### Tasks\n>In the first part of the project, students will create a **basic web page using markdown and publish it on Github repository** using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\n>\n>In the second part of the project, students will learn how to **publish their website on gh-pages**, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #optional}\n### Optional\n>As an optional study, students may also want to learn about using **callouts in their markdown documentation**. The following links provide useful information on the topic:\n>\n>- [markdown-callouts](https://oprypin.github.io/markdown-callouts/)\n>- [Callout Blocks Quarto](https://quarto.org/docs/authoring/callouts.html)\n>- [Getting Started with RDMD](https://rdmd.readme.io/docs/getting-started)\n>- [Divs and spans](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans)\n>- [codepen.io HTML+CSS](https://codepen.io/dongmikim/pen/VwLqyjQ)\n>\n>Using **callouts, links, tabs and CSS** can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.\n>\n>To take their project to the next level, students may also choose to connect to an **API** (Application Programming Interface) to **retrieve data and render charts using JavaScript**. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n>\n> - [Quarto data sources](/markup/markupquartoprogramming.qmd)\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #after}\n### After\n>The Quarto website project is a great opportunity for students to develop their skills in **web development, markdown, and version control using GitHub and Visual Code**.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n:::\n\n\n\n\n\nApproach #2: HTML + CSS\nLab statement on Lab#MD01-1: Create and publish by Quarto\n\n\nApproach #3: HTML + CSS + JS\nFrom w3.css: W3.CSS Navigation Tabs\nLab statement on Lab#SE01-2: Maven/Gradle Person and Account stored in JSON\n<script>\nfunction openLab(evt, labStep) {\n  var i, tabcontent, tablinks;\n  tabcontent = document.getElementsByClassName(\"tabcontentw3\");\n  for (i = 0; i < tabcontent.length; i++) {\n    tabcontent[i].style.display = \"none\";\n  }\n  tablinks = document.getElementsByClassName(\"tablinks\");\n  for (i = 0; i < tablinks.length; i++) {\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n  }\n  document.getElementById(labStep).style.display = \"block\";\n  evt.currentTarget.className += \" active\";\n}\n</script>\n\n\nApproach #4: import MDReadme?\nCode Blocks\nSyntax\nWe offer both classic single code blocks, as well as a tabbed interface for displaying multiple code blocks concisely! These are written nearly identically to a series of vanilla markdown code snippets, except for their distinct lack of an additional line break separating each subsequent block:\njavascript I'm A tab\nconsole.log('Code Tab A');\n\njavascript I'm tab B\nconsole.log('Code Tab B');\nCustom CSS\n.markdown-body {\n  --md-code-background: #e3dcef;\n  --md-code-text: #4a2b7b;\n  --md-code-tabs: #c6b8dd;\n  --md-code-radius: 4px;\n}\n\n\n\n\n\n\nHow to import that feature Navigate by Tabs into Quarto?\n\n\n\nThis could work but it has been NOT tested:\n\nYou could convert Readme Markdown to Quarto Markdown, using a tool like Markdown Converter (https://markdown.pioul.fr/), which supports both flavors of Markdown.\nOr Markdowon Parser form Flexmark Java library\n\nIn any case, they are not Extensions within Quarto … so, for now, there is NOT an easy and direct solution to do this conversion."
  },
  {
    "objectID": "markup/markupintro.html",
    "href": "markup/markupintro.html",
    "title": "Introduction Markup",
    "section": "",
    "text": "📘 Markup language\nA markup language is a set of symbols or codes that are used to annotate or format text or other data. Markup languages are commonly used to describe the structure and formatting of documents, such as web pages, books, or articles.\n\n\nMarkup languages typically use tags or elements to indicate the structure of the document, such as headings, paragraphs, or lists. They may also include formatting instructions, such as font sizes and colors, or rules for how the document should be displayed. Markup languages are often used in combination with a programming language or other technology to create dynamic and interactive documents.\nExamples of markup languages include:\n\nHTML,\nXML,\nand Markdown\n\nDo no get confuse with a data-oriented language structure used as the input format like:\n\nJSON\nYAML\nApplicarion.properties"
  },
  {
    "objectID": "markup/markupintro.html#html",
    "href": "markup/markupintro.html#html",
    "title": "Introduction Markup",
    "section": "HTML",
    "text": "HTML\nHTML (Hypertext Markup Language) is a markup language used to create structured documents and web pages. HTML uses a set of tags and attributes to describe the content and layout of a document, and defines how the content should be displayed by a web browser.\nHTML tags typically take the form of keywords enclosed in angle brackets, such as\n\n<p> for a paragraph, <h1> for a heading, and <img> for an image\n\nHTML attributes provide additional information about the elements, such as the source of an image or the target of a link.\nHTML also defines a set of standard styles, such as font sizes and colors, which can be used to format the content of a document. HTML is the foundation of the modern web, and is used to create the majority of web pages and web-based applications."
  },
  {
    "objectID": "markup/markupintro.html#markdown",
    "href": "markup/markupintro.html#markdown",
    "title": "Introduction Markup",
    "section": "Markdown",
    "text": "Markdown\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. Markdown is a plain text formatting syntax that uses a simple set of conventions to indicate how the text should be formatted.\nThese conventions include the use of characters such as:\n\nasterisks (*)\nand underscores (_) to indicate bold and italic text, respectively,\nand the use of hash symbols (#) to create headings.\n\nMarkdown is designed to be simple and intuitive, and can be easily converted to other formats, such as HTML, for display on the web. Markdown is widely used in blogging, online forums, and software documentation, and is often used as an alternative to more complex formatting languages, such as HTML."
  },
  {
    "objectID": "markup/markupintro.html#html-and-markdown",
    "href": "markup/markupintro.html#html-and-markdown",
    "title": "Introduction Markup",
    "section": "HTML and Markdown",
    "text": "HTML and Markdown\nMarkdown is not a replacement for HTML, or even close to it. Its syntax is very small, corresponding only to a very small subset of HTML tags.\nThe idea is not to create a syntax that makes it easier to insert HTML tags. In my opinion, HTML tags are already easy to insert.\nThe idea for Markdown is to make it easy to read, write, and edit prose. HTML is a publishing format; Markdown is a writing format. Thus, Markdown’s formatting syntax only addresses issues that can be conveyed in plain text. By John Gruber, Markdown"
  },
  {
    "objectID": "markup/markupquarto.html",
    "href": "markup/markupquarto.html",
    "title": "Quarto Markdown: basics",
    "section": "",
    "text": "Quarto is a publishing system/engine based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read:\n\nA Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber\n\nThis document provides examples of the most commonly used markdown syntax. See the full documentation of Pandoc’s Markdown for more in-depth documentation."
  },
  {
    "objectID": "markup/markupquarto.html#syntax",
    "href": "markup/markupquarto.html#syntax",
    "title": "Quarto Markdown: basics",
    "section": "Syntax",
    "text": "Syntax\n\n\n\n\n\n\nMarkdown Basics\n\n\n\n\n\n\n\nMarkdown Basics\n\n\nText Formatting Headings Links & Images Lists Tables Source Code Equations Diagrams Videos Page Breaks Divs and Spans Callout Blocks Other Blocks\n\n\n\n\n\n\n\n\n\n\n\nFigures\n\n\n\n\n\n\n\nFigures\n\n\nFigure Basics Linked Figures Figure Alignment Alt Text Multiformat Figures Subfigures Figure Panels Figure Divs LaTeX Figures Caption Locations Custom Layouts Computations Block Layout\n\n\n\n\n\n\n\n\n\n\n\nTables\n\n\n\n\n\n\n\nTables\n\n\nMarkdown Tables Column Widths Cross References Caption Location Computations Grid Tables\n\n\n\n\n\n\n\n\n\n\n\nDiagrams\n\n\n\n\n\n\n\nDiagrams\n\n\nMermaid Graphviz Authoring Figures File Include Sizing Mermaid Formats Code Echo Chrome Install\n\n\n\n\n\n\n\n\n\n\n\nVideos\n\n\n\n\n\n\n\nVideos\n\n\nVideo URL Options Revealjs\n\n\n\n\n\n\n\n\n\n\n\nCallout Types\n\n\n\n\n\n\n\nCallout Types\n\n\nMarkdown Syntax Customizing Appearance Format Support\n\n\n\n\n\n\n\n\n\n\n\nCross References\n\n\n\n\n\n\n\nCross References\n\n\nFigures Tables Equations Sections Code Listings Theorems and Proofs References Chapter Numbering Lists Options\n\n\n\n\n\n\n\n\n\n\n\nTitle Blocks\n\n\n\n\n\n\n\nTitle Blocks\n\n\nTitle Banners Date Metadata Labels\n\n\n\n\n\n\n\n\n\n\n\nArticle Layout\n\n\n\n\n\n\n\nArticle Layout\n\n\nMarkdown Syntax Customizing Appearance Format Support\n\n\n\n\n\n\n\n\n\n\n\nPresentations\n\n\n\n\n\n\n\nPresentations\n\n\nCreating Slides Incremental Lists Multiple Columns Learning More"
  },
  {
    "objectID": "markup/markupquartocreating.html",
    "href": "markup/markupquartocreating.html",
    "title": "Quarto Markdown: creating",
    "section": "",
    "text": "Follow the Quick Start with Visual Code Extension Quarto to get a simple website up and running. After covering the basics, read on to learn about website navigation and other more advanced website features.\n\n\n\n\n\n\n(1) Install Quarto Extension for Visual Code\n\n\n\n\n\nVS Code extension for the Quarto scientific and technical publishing system. This extension provides language support for Quarto .qmd files. Extension Resources: - Marketplace - Repository - License - Quarto\n\n\n\nQuarto extension for Visual Code\n\n\n\n\n\n\n\n\n\n\n\n(2) Quarto: Create Project\n\n\n\n\n\nTo create a new website project within VS Code, execute the Quarto: Create Project command from the command-palette (CTRL + SHRIFT + P)\n\n\n\nQuarto Visual Code palette create Project\n\n\n\n\n\n\n\n\n\n\n\n(3) Quarto: Select Website and Directory Name\n\n\n\n\n\nThen, select Website Project.\nYou’ll be prompted to select a parent directory to create the project within. Then, you’ll be asked to name the directory for your website project.\n\n\n\nQuarto Visual Code palette create Project and then select website\n\n\n\n\n\nQuarto Visual Code palette create Project and then select website and directory Name\n\n\n\n\n\n\n\n\n\n\n\n(4) Quarto: Project Created\n\n\n\n\n\nThe new website project will be created and opened within VS Code. Click the Render button to preview the website and code the _quarto.yml.\n\n\n\nQuarto Visual Code Project Created"
  },
  {
    "objectID": "markup/markupquartoprogramming.html",
    "href": "markup/markupquartoprogramming.html",
    "title": "Quarto Markdown: data sources",
    "section": "",
    "text": "There are a wide variety of way to make data available to OJS:\n\nRead CSV, JSON, SQLite, and more using the FileAttachments API.\nUse the ojs_define() function to make data processed in Python or R available to {ojs} cells.\nMake calls to Web APIs for online services and data stores.\n\nWe’ll explore all of these techniques below.\n\n\n\n\n\n\nFile Attachments\n\n\n\n\n\n\n\nFile Attachments Use the FileAttachment function from the standard library to read data from a file. For example, here we read and plot a CSV of NOAA’s Monthly CO2 concentration data from Mauna Loa:\n\n\ndata = {\n  const co2data = await FileAttachment(\"co2_mm.csv\")\n    .csv({ typed: true } );\n  return co2data.map(d => {\n    d[\"decimal date\"] = Number(d[\"decimal date\"]);\n    d.average = Number(d.average);\n    return d;\n  });\n}\nPlot.plot({\n  marks: [\n    Plot.line(data,\n      { x: \"decimal date\", y: \"average\"},\n      { stroke: \"black\" }\n    )\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\nPython and R\n\n\n\n\n\n\n\nPython and R The data you want to use with OJS might not always be available in raw form. Often you’ll need to read and preprocess the raw data using Python or R. You can perform this preprocessing during document render (in an {r} or {python} code cell) and then make it available to {ojs} cells via the ojs_define() function. Here’s an example. We’ll read the same data into R, do some grouping and summarization, then make it available to OJS using ojs_define:\n\n\n#| output: false\n\nlibrary(readr)\nlibrary(dplyr)\n\nco2 = read_csv(\"co2_mm.csv\")  %>%\n  group_by(year) %>%\n  summarize(max = max(average))\n\nojs_define(co2data = co2)\n\n\n\n\n\n\n\n\n\n\n\nWeb APIs\n\n\n\n\n\n\n\nWeb APIs You can use the d3.json() function to read JSON data from web services and data sources. Here we query the GitHub API for data on contributions to the Python pandas package:\n\n\nd3 = require('d3')\n\ncontributors = await d3.json(\n  \"https://api.github.com/repos/pandas-dev/pandas/stats/contributors\"\n)\n\ncommits = contributors.map(contributor => {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})"
  },
  {
    "objectID": "markup/markupquartopublishing.html",
    "href": "markup/markupquartopublishing.html",
    "title": "Quarto Markdown: publishing",
    "section": "",
    "text": "GitHub Pages is a website hosting service that enables you to publish content based on source code managed within a GitHub repository.\nUse the quarto publish command to publish content rendered on your local machine.\nquarto publish will make several operations with GitHub Pages:\n\nprovision,\ncreate pipeline,\ncreate branch with HTML source\nparse .qmd to .html\nrender (or build)\ndeploy,\nhosting,\npublish\n\n\n\n\ngh-pages build and deployment #17: example of Actions triggered by Quarto publish\n\n\nThe most important for us will be to make a branch gh-pages the first time where the output HTML will be deployed with quarto publish gh-pages.\n\n\n\n\n\n\n(0) Files On Repository\n\n\n\n\n\nYour need to create a repository on GitHub with the Quarto pages .qmd pushed there.\nCreate repository, commit and push files to repository with Sync tool. To write our repository you need to:\n\nCreate Token on GitHub.com: Creating a personal access token\nUse this token on your Visual Code - Git, link:\n\n$git config --global user.name \"Mona Lisa\"\n$git config --global user.mail \"monalisa@davinci.com\"\n$git config --global user.password \"4WTVEG43_Q34WG435GAWER4_Q4vsrsrggr_3D44\"\n\n\n\n\n\n\n\n\n\n(1) Activate GitHub Pages service\n\n\n\n\n\nYou can modify these options in Settings : Pages for your repository.\n\n\n\n\n\n\ngh-pages activation\n\n\n\n\n\n\n\n\nfig 13\n\n\n\n\n\n\n\n\n\n\n\nat first gh-pages branck doesn’t exist: don’t worry, quarto will create later\n\n\n\n\n\n\n\n\nfig 14\n\n\n\n\n\n\n\n\n\n\n\ngh-pages is our branch: root\n\n\n\n\n\n\n\n\nfig 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(2) Define Ignoring Output\n\n\n\n\n\nIt’s important to note that you don’t need to check your _site or _book directory into version control (if you have done this in the past you know it makes for very messy diffs!). Before proceeding you should add the output directory of your project to .gitignore. For example:\n## .gitignore\n\n/.quarto/\n/_site/\nIf you’ve already checked these files into source control you may need to remove them explicitly:\n## Terminal\n\ngit rm -r _site\n\n\n\n\n\n\n\n\n\n(3) Publish on branch gh-pages\n\n\n\n\n\nOnce you have configured the source branch and updated your .gitignore, navigate to the directory where your project / git repository is located, make sure you are not on the gh-pages branch, and execute the quarto publish command for GitHub Pages:\n## Terminal\n\nquarto publish gh-pages\nThe publish command will confirm that you want to publish, render your content, copy the output to a special gh-pages branch, push that branch to GitHub, and then open a browser to view your site once it is deployed.\nAfter this first time it will be no necessary to call gh-pages brach, once it has been defined as default:\n##Terminal\n\nquarto publish \n\n\n\n\n\n\n\n\n\n(4) Website published\n\n\n\n\n\nYour Quarto website will be published by GitHub pages on:\n\nuserName.github.io\\repositoryName"
  },
  {
    "objectID": "markup/markupw3css.html",
    "href": "markup/markupw3css.html",
    "title": "CSS: W3.css",
    "section": "",
    "text": "W3.CSS is a CSS (Cascading Style Sheets) framework that is designed to make it easier to create modern and responsive web pages.\nIt provides a set of pre-defined styles and layouts that can be easily customized and applied to HTML elements, allowing developers to quickly and easily create professional-looking web pages without the need to write complex CSS code.\nW3.CSS is lightweight, easy to use, and supports all modern web browsers.\n\nW3.CSS is Smaller, Faster and Easier to Use\n\nW3.CSS is a modern, responsive, mobile first CSS framework.\nW3.CSS provides equality for all browsers: Chrome. Firefox. Edge. IE. Safari. Opera.\nW3.CSS provides equality for all devices: Desktop. Laptop. Tablet. Mobile.\nW3.CSS is standard CSS only (No jQuery or JavaScript library).\n\n\n\nReference: W3.css"
  },
  {
    "objectID": "markup/markupw3css.html#example",
    "href": "markup/markupw3css.html#example",
    "title": "CSS: W3.css",
    "section": "Example",
    "text": "Example\n<!DOCTYPE html>\n<html>\n<title>W3.CSS</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n<body>\n\n<div class=\"w3-container w3-teal\">\n  <h1>My Car</h1>\n</div>\n\n<img src=\"img_car.jpg\" alt=\"Car\" style=\"width:100%\">\n\n<div class=\"w3-container\">\n  <p>A car is a wheeled, self-powered motor vehicle used for transportation.</p>\n</div>\n\n<div class=\"w3-container w3-teal\">\n  <p>My footer information</p>\n</div>\n\n</body>\n</html>"
  },
  {
    "objectID": "markup/mulab1.html",
    "href": "markup/mulab1.html",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "",
    "text": "Create and publish a website on GitHub pages (Git on cloud and deploy pipeline) with Visual (IDE) Code and Quarto (publishing system/engine)\n\n\n\n\n\n\n\n Before\n\n\nStudents will need to have a basic understanding of web development, including HTML, CSS, and JavaScript. \n\n\n  Goal\n\n\nIn this project, students will be required to create a web application using basically Markdown, flavour Quarto, and when it is necessary HTML, JS and CSS. Additionally, they will need to use GitHub and Visual Code** to manage their project’s code and collaborate with their peers. \n\n\n  Tasks\n\n\nThe tasks involved in this project include: \n\n\nIn the first part of the project, students will create a basic web page using markdown and publish it on Github repository using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\n\n\nIn the second part of the project, students will learn how to publish their website on gh-pages, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\n\n\nYou should check your website on user/github.io/repo.\n\n\n\n  Optional\n\n\nAs an optional study, students may also want to learn about using callouts in their markdown documentation. The following links provide useful information on the topic: \n\n\nmarkdown-callouts\n\n\nCallout Blocks Quarto\n\n\nGetting Started with RDMD\n\n\nDivs and spans\n\n\ncodepen.io HTML+CSS\n\n\nHow TO - Tabs W3.CSS HTML+CSS+JS\n\n\n\nUsing callouts, links, tabs and CSS can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.   To take their project to the next level, students may also choose to connect to an API (Application Programming Interface) to retrieve data and render charts using JavaScript. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n\n\nQuarto data sources\n\n\n  After\n\n\nThe Quarto website project is a great opportunity for students to develop their skills in web development, markdown, and version control using GitHub and Visual Code."
  },
  {
    "objectID": "markup/mulab1.html#step-by-step",
    "href": "markup/mulab1.html#step-by-step",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "Step-by-step",
    "text": "Step-by-step\n\n\n\nStep-by-step guide to create and publish a Quarto website\n\n\n\nInstall some software and Sign in:\n\nInstall Visual Code\nInstall GitHub Extension and Source Control if they don’t come with new installation\nInstall Quarto Extension in Visual Code\nSign in GitHub from Visual Code (wizard)\nInstall Quarto in your OS (download from Quarto site - Get started)\n\nCreate Quarto Project\nGitHub tasks:\n\nCreate repository, commit and push files to repository with Sync tool. To write our repository you need to:\n\nCreate Token on GitHub.com: Creating a personal access token\nUse this token on your Visual Code - Git, link:\n$git config --global user.name \"Mona Lisa\"\n$git config --global user.mail \"monalisa@davinci.com\"\n$git config --global user.paasword \"4WTVEG43_Q34WG435GAWER4_Q4vsrsrggr_3D44\"\n\nActivate gh-pages service\n\nquarto render and quarto publish gh-pages / quarto publish on Visual Code’s terminal\n\nPublish Quarto Project\nImprove your Quarto Project\n\nGo to published web:user/github.io/repo"
  },
  {
    "objectID": "markup/mulab1.html#screen-shoots-2022-12-12",
    "href": "markup/mulab1.html#screen-shoots-2022-12-12",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "Screen-shoots (2022-12-12)",
    "text": "Screen-shoots (2022-12-12)\nLog in to GitHub and Quarto Creation"
  },
  {
    "objectID": "markup/mulab1.html#screen-shoots-2022-12-08",
    "href": "markup/mulab1.html#screen-shoots-2022-12-08",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "Screen-shoots (2022-12-08)",
    "text": "Screen-shoots (2022-12-08)\n\n\n\n\n\n\nBasic Quarto Project\n\n\n\n\n\n\n\n\nfig 1\n\n\n\n\n\n\n\n\n\n\n\nInitialize Repository and Publish\n\n\n\n\n\n\n\n\nfig 2\n\n\n\n\n\n\n\n\n\n\n\nYou may use another Extensions\n\n\n\n\n\n\n\n\nfig 3\n\n\n\n\n\n\n\n\n\n\n\nlet s do a commit but .. first\n\n\n\n\n\n\n\n\nfig 4\n\n\n\n\n\n\n\n\n\n\n\nwe need to publish branch\n\n\n\n\n\n\n\n\nfig 5\n\n\n\n\n\n\n\n\n\n\n\nPermission\n\n\n\n\n\n\n\n\nfig 6\n\n\n\n\n\n\n\n\n\n\n\nPermission\n\n\n\n\n\n\n\n\nfig 7\n\n\n\n\n\n\n\n\n\n\n\npublish in public repository: name\n\n\n\n\n\n\n\n\nfig 8\n\n\n\n\n\n\n\n\n\n\n\nrepository name: wiki is better! :-)\n\n\n\n\n\n\n\n\nfig 9\n\n\n\n\n\n\n\n\n\n\n\nrepository name: publishing\n\n\n\n\n\n\n\n\nfig 10\n\n\n\n\n\n\n\n\n\n\n\nthis tree folder is publising\n\n\n\n\n\n\n\n\nfig 11\n\n\n\n\n\n\n\n\n\n\n\ntree folder in github\n\n\n\n\n\n\n\n\nfig 12\n\n\n\n\n\n\n\n\n\n\n\ngh-pages activation\n\n\n\n\n\n\n\n\nfig 13\n\n\n\n\n\n\n\n\n\n\n\nat first gh-pages branck doesn’t exist: don’t worry, quarto will create later\n\n\n\n\n\n\n\n\nfig 14\n\n\n\n\n\n\n\n\n\n\n\nmaster is our branch: root\n\n\n\n\n\n\n\n\nfig 15\n\n\n\n\n\n\n\n\n\n\n\nthere is just one brach: master (brach gh-pages NOT YET)\n\n\n\n\n\n\n\n\nfig 16\n\n\n\n\n\n\n\n\n\n\n\nrender\n\n\n\n\n\n\n\n\nfig 17\n\n\n\n\n\n\n\n\n\n\n\nquarto publish\n\n\n\n\n\n\n\n\nfig 18\n\n\n\n\n\n\n\n\n\n\n\nyes\n\n\n\n\n\n\n\n\nfig 19\n\n\n\n\n\n\n\n\n\n\n\nnow: brach created\n\n\n\n\n\n\n\n\nfig 20\n\n\n\n\n\n\n\n\n\n\n\nand … gh pages now has got the gh-pages branch selected\n\n\n\n\n\n\n\n\nfig 21\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: commit\n\n\n\n\n\n\n\n\nfig 22\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: deploy\n\n\n\n\n\n\n\n\nfig 23\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: actions\n\n\n\n\n\n\n\n\nfig 24\n\n\n\n\n\n\n\n\n\n\n\nweb deployed: live\n\n\n\n\n\n\n\n\nfig 25\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 1/4\n\n\n\n\n\n\n\n\nfig 26\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 2/4\n\n\n\n\n\n\n\n\nfig 27\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 3/4\n\n\n\n\n\n\n\n\nfig 28\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 4/4\n\n\n\n\n\n\n\n\nfig 29"
  },
  {
    "objectID": "markup/resources.html",
    "href": "markup/resources.html",
    "title": "MarkUp Languages Resources",
    "section": "",
    "text": "About this site: to-do"
  },
  {
    "objectID": "reactjs/hookcustom.html",
    "href": "reactjs/hookcustom.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/hookeffect.html",
    "href": "reactjs/hookeffect.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/hookreducer.html",
    "href": "reactjs/hookreducer.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/hookref.html",
    "href": "reactjs/hookref.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/hookstate.html",
    "href": "reactjs/hookstate.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/reactjs.html",
    "href": "reactjs/reactjs.html",
    "title": "React JS: Introduction",
    "section": "",
    "text": "📘 React JS\nReact.js is a JavaScript library used for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React allows developers to create large web applications that use data which can change over time, without reloading the page.\nIt aims to provide a more efficient and elegant way to manipulate the user interface in order to create a more intuitive and smooth user experience.\n\n\nSome of the main features of React.js include:\n\nIt is a single-page application (SPA) framework, which means it allows developers to create web applications that load a single HTML page and dynamically update the page in response to user actions without reloading the page. This makes React applications faster and more responsive than traditional web applications.\nComponents: In React, everything is a component. Components are small, reusable pieces of code that can be easily combined to create complex user interfaces.\nVirtual DOM: React uses a virtual DOM (Document Object Model) to improve the performance of components. The virtual DOM is a lightweight in-memory representation of the actual DOM, and it allows React to update only the specific components that have changed, instead of re-rendering the entire page.\nJSX: React uses JSX, which is a syntax extension to JavaScript that allows developers to write HTML-like code that can be compiled into JavaScript. This allows developers to use familiar HTML tags and attributes to build React components, making it easier to write and understand React code.\nState: React components have a built-in state object that stores the local data of a component. The state of a component can be updated in response to user actions or other events, and the updated state will automatically be reflected in the user interface.\nProps: In React, components can receive data from their parent components through props, which are essentially input parameters that allow components to be customized and reused. Props can be used to pass data, functions, or any other type of information to a child component.\nRouting: React Router is a popular library that provides routing capabilities to React applications. It allows developers to define the different routes of the application, and to map each route to a specific component. This makes it possible to create a single-page application with multiple pages and views, without reloading the page."
  },
  {
    "objectID": "reactjs/reactjs.html#key-concept-hooks",
    "href": "reactjs/reactjs.html#key-concept-hooks",
    "title": "React JS: Introduction",
    "section": "Key-concept: Hooks",
    "text": "Key-concept: Hooks\nIn React, Hooks are a new feature introduced in React 16.8 that allows developers to use state and other React features without writing a class. They are designed to make it easier to reuse stateful logic between components, and to better manage side effects in function components.\n\n\n\n\n\n\nImportant\n\n\n\n📘 Clear lifecycle\nHooks allow developers to use state and other React features by writing functions, rather than creating class-based components. This makes it possible to use state and other React features without the overhead of managing a class and its lifecycle.\n\n\nFor example, instead of using a class to define a component, you can use the useState Hook to add state to a function component:\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\nIn this example, the useState Hook is used to add state to the Example component. The useState function returns a pair of values: the current state, and a function that can be used to update the state. The current state is stored in the count variable, and the function to update the state is stored in the setCount variable.\nHooks are a powerful and flexible tool that can help simplify and improve the way you write React components. They allow you to use state and other React features without the overhead of class-based components, and they make it easier to reuse stateful logic between components."
  },
  {
    "objectID": "reactjs/reactjs.html#with-jsx-and-hooks-comes-order-in-just-one-document",
    "href": "reactjs/reactjs.html#with-jsx-and-hooks-comes-order-in-just-one-document",
    "title": "React JS: Introduction",
    "section": "With JSX and Hooks comes order in just one document",
    "text": "With JSX and Hooks comes order in just one document\n\n\n\n\n\n\nImportant\n\n\n\n📘 No need of classes\nHooks are a new feature that allows developers to use state and other React features without writing a class.\n\n\n\n📘 Hooks and JSX\nThey are a powerful tool for simplifying and improving the way you write React components, and they can be used to combine the HTML, CSS, business logic, model, and navigation code of a component into a single, cohesive unit.\n\n\nHere is an example of a React component that uses Hooks to combine HTML, CSS, business logic, and navigation code in a single file:\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nfunction ExampleComponent(props) {\n  const { data } = props;\n  const [count, setCount] = useState(0);\n\n  return (\n    <div className=\"example-component\">\n      <h1>Example Component</h1>\n      <p>{data.description}</p>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n      <Link to=\"/\">Back to Home</Link>\n    </div>\n  );\n}\n\nexport default ExampleComponent;\nIn this example, the useState Hook is used to add state to the ExampleComponent function. The useState function returns a pair of values: the current state, and a function that can be used to update the state.\nThe current state is stored in the count variable, and the function to update the state is stored in the setCount variable.\nThese variables are used in the JSX code of the component to render the current state and to update the state in response to user actions. This allows the different types of code to be combined into a single, cohesive unit using Hooks."
  },
  {
    "objectID": "reactjs/reactjscontext.html",
    "href": "reactjs/reactjscontext.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/resources.html",
    "href": "reactjs/resources.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/rjslab1.html",
    "href": "reactjs/rjslab1.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/rjslab2.html",
    "href": "reactjs/rjslab2.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/rjslab3.html",
    "href": "reactjs/rjslab3.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/rjslab4.html",
    "href": "reactjs/rjslab4.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/rjslab5.html",
    "href": "reactjs/rjslab5.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "scrum/agilemanifesto.html",
    "href": "scrum/agilemanifesto.html",
    "title": "Agile Manifesto",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "scrum/digitaltoolsscrum.html",
    "href": "scrum/digitaltoolsscrum.html",
    "title": "Digital Tools SCRUM",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "scrum/scrum.html",
    "href": "scrum/scrum.html",
    "title": "SCRUM",
    "section": "",
    "text": "📘 SCRUM definition\nScrum is a framework for project management that is based on teamwork, accountability, transparency and short time-boxed iterative progress toward a well-defined goal.\nThe framework begins with a simple premise: start with what can be seen or known. After that, track the progress and adapt, whenever it is necessary.\nAt the end of each iteration, the team holds two meetings: one review* to show the work done for clients and to get feedback, and one retrospective** to enable the team to reflect and improve."
  },
  {
    "objectID": "scrum/scrumguide.html",
    "href": "scrum/scrumguide.html",
    "title": "SCRUM Guide",
    "section": "",
    "text": "Hi, this is alberprofe speaking!\n;-)"
  },
  {
    "objectID": "scrum/week1.html",
    "href": "scrum/week1.html",
    "title": "Week 1: Meetings and impediments",
    "section": "",
    "text": "About this site\nhttps://sites.google.com/view/gestioprojectes/llegir/setmana1"
  },
  {
    "objectID": "scrum/week2.html",
    "href": "scrum/week2.html",
    "title": "Week 2: User stories, tasks and habits",
    "section": "",
    "text": "About this site\nhttps://sites.google.com/view/gestioprojectes/llegir/setmana2"
  },
  {
    "objectID": "scrum/week3.html",
    "href": "scrum/week3.html",
    "title": "Week 3: Communication and value",
    "section": "",
    "text": "About this site\nhttps://sites.google.com/view/gestioprojectes/llegir/setmana3"
  },
  {
    "objectID": "scrum/week4.html",
    "href": "scrum/week4.html",
    "title": "Week 4: ScrumMaster, how it works",
    "section": "",
    "text": "About this site\nhttps://sites.google.com/view/gestioprojectes/llegir/setmana4"
  },
  {
    "objectID": "scrum/week5.html",
    "href": "scrum/week5.html",
    "title": "Week 5: Mindset, the key to everythng",
    "section": "",
    "text": "About this site\nhttps://sites.google.com/view/gestioprojectes/llegir/setmana5"
  },
  {
    "objectID": "spring/spring.html",
    "href": "spring/spring.html",
    "title": "Spring",
    "section": "",
    "text": "📘 What is Spring Framework”?\nSpring Framework is a powerful lightweight application development framework used for Enterprise Java (JEE).\n\n\nThe Spring Framework is a popular Java framework for building enterprise-level applications.\nThe Spring Framework provides a comprehensive set of tools and libraries for building and maintaining enterprise applications, and is designed to support the “software development principles of modularity, component-based development, and non-invasive programming”.\nThe Spring Framework consists of several modules, each of which provides a different set of functionality and tools. Some of the key modules of the Spring Framework include:\n\nSpring Core: The core module provides the fundamental functionality of the Spring Framework, including dependency injection, inversion of control, and support for aspect-oriented programming.\nSpring MVC: The MVC (Model-View-Controller) module provides a web-oriented framework for building web applications, and supports the development of web applications using a “front controller” pattern.\nSpring Data: The Data module provides tools and libraries for working with data sources and databases, and supports the development of data-oriented applications.\nSpring Security: The Security module provides tools and libraries for implementing authentication and authorization in applications, and supports the development of secure applications.\nSpring Boot: The Boot module provides a way to quickly and easily create stand-alone, production-grade Spring applications. Spring Boot uses an “opinionated” approach to configuration, which means that it provides a set of default configurations that are designed to work well together, and allows developers to get started quickly without having to spend a lot of time configuring the application.\n\nOverall, the Spring Framework is a powerful and popular toolkit for building enterprise-level applications in Java, and provides a wide range of tools and libraries for supporting various aspects of application development. By using the Spring Framework, developers can take advantage of the framework’s modular design, and can choose the specific modules that are most relevant to their needs and goals."
  },
  {
    "objectID": "spring/spring.html#timeline",
    "href": "spring/spring.html#timeline",
    "title": "Spring",
    "section": "Timeline",
    "text": "Timeline\n\nThe current stable version, as of December 2022, is Spring 6.0.2. You can always find new version announcements on https://github.com/spring-projects/spring-framework/releases.\nThe current stable version, as of December 2022, is Spring Boot 3.0.0. You can always find new version announcements on https://github.com/spring-projects/spring-boot/releases.\nSpring Boot 3.0.0 (and therefore the latest Spring Framework 6.0.2) supports Java 19 while also remaining compatible with Java 11 and 8.\n\n\n\n\nFollowing is the timeline shown about major releases in the history of Spring"
  },
  {
    "objectID": "spring/spring.html#differences-between-the-spring-framework-and-spring-boot",
    "href": "spring/spring.html#differences-between-the-spring-framework-and-spring-boot",
    "title": "Spring",
    "section": "Differences between the Spring Framework and Spring Boot",
    "text": "Differences between the Spring Framework and Spring Boot\n\nThe Spring Framework is a comprehensive framework for building and maintaining enterprise-level applications in Java, while Spring Boot is focused specifically on simplifying the process of creating and deploying stand-alone, production-grade Spring applications.\nThe Spring Framework provides a flexible and modular approach to configuration, while Spring Boot uses an “opinionated” approach to configuration, which provides a set of default configurations that are designed to work well together.\nThe Spring Framework provides a web-oriented framework called Spring MVC, while Spring Boot provides a more integrated approach to web application development, and includes support for building web applications using a wide range of technologies.\nIn general, the Spring Framework and Spring Boot are both useful frameworks for building enterprise-level applications in Java, but have different scopes, focus, and approaches to configuration, and may be more or less suitable for different types of projects and goals.\n\n\n\n\ntable summarizing the differences between the Spring Framework and Spring Boot"
  },
  {
    "objectID": "spring/springmvc.html",
    "href": "spring/springmvc.html",
    "title": "Spring MVC",
    "section": "",
    "text": "Spring MVC\n\n\nThe Spring Web model-view-controller (MVC) framework is designed around a DispatcherServlet that dispatches requests to handlers, with configurable handler mappings, view resolution, locale and theme resolution as well as support for uploading files.\nThe default handler is based on the @Controller and @RequestMapping annotations, offering a wide range of flexible handling methods.\nWith the introduction of Spring 3.0, the @Controller mechanism also allows you to create RESTful Web sites and applications, through the @PathVariable annotation and other features."
  },
  {
    "objectID": "springboot/resources.html",
    "href": "springboot/resources.html",
    "title": "Spring Boot Resources",
    "section": "",
    "text": "About this site: to-do"
  },
  {
    "objectID": "springboot/sblab1.html",
    "href": "springboot/sblab1.html",
    "title": "Lab 1: Spring Boot Projects",
    "section": "",
    "text": "Welcome to the cifojava2022-4 wiki!"
  },
  {
    "objectID": "springboot/sblab1.html#what-is-h2-database",
    "href": "springboot/sblab1.html#what-is-h2-database",
    "title": "Lab 1: Spring Boot Projects",
    "section": "What is H2 Database",
    "text": "What is H2 Database\nH2 is pure Java SQL database, which means you can embed H2 directly in your Java applications without any database installation.\n\nVery fast, open source, JDBC API compatible.\nYou can use H2 in different modes, depending on your need:in-memory, embedded or client/server.\nH2 provides a browser-based console application which you can use to access SQL database.\nLightweight: about 2.5MB jar file size. With such features, H2 can be used for rapid prototype development,testing purpose or embedded in Java applications.\n\nH2 Java DataBase"
  },
  {
    "objectID": "springboot/sblab1.html#java-jdbc",
    "href": "springboot/sblab1.html#java-jdbc",
    "title": "Lab 1: Spring Boot Projects",
    "section": "(1) Java JDBC",
    "text": "(1) Java JDBC\n\ndemoMavenH2\nJava™ database connectivity (JDBC) is the JavaSoft specification of a standard application programming interface (API) that allows Java programs to access database management systems. The JDBC API consists of a set of interfaces and classes written in the Java programming language.\nUsing these standard interfaces and classes, programmers can write applications that connect to databases, send queries written in structured query language (SQL), and process the results.\nSince JDBC is a standard specification, one Java program that uses the JDBC API can connect to any database management system (DBMS), as long as a driver exists for that particular DBMS.\nProject repo"
  },
  {
    "objectID": "springboot/sblab1.html#entity-manager-api",
    "href": "springboot/sblab1.html#entity-manager-api",
    "title": "Lab 1: Spring Boot Projects",
    "section": "(2) Entity Manager API",
    "text": "(2) Entity Manager API\n\ntest-hibernate-jpa\nJava Persistence API is a Java Specification and Standard for Object Relational Mapping (ORM). In Object Relational Mapping we create Java Objects which represents the database entities. ORM also provides an EntityManager which provides methods to create, delete, update and find the objects from database.\nWe don’t need to write low level queries, we just need to use entity manager and access the entities through java objects.\nProject repo"
  },
  {
    "objectID": "springboot/sblab1.html#jpa-data-spring-boot",
    "href": "springboot/sblab1.html#jpa-data-spring-boot",
    "title": "Lab 1: Spring Boot Projects",
    "section": "(3) JPA Data Spring Boot",
    "text": "(3) JPA Data Spring Boot\n\nlibraryH2Command\nProject repo\nBase project:\n\nPOM\nDataBase H2\nApplication.Properties\nCommand Line Runner with methods to test\n@Entity Book\n@BookService Read and Create operations\n@BookRepository JPA 2.0"
  },
  {
    "objectID": "springboot/sblab2.html",
    "href": "springboot/sblab2.html",
    "title": "Lab 2: Spring Boot Projects",
    "section": "",
    "text": "Welcome to the cifojava2022-3 wiki!"
  },
  {
    "objectID": "springboot/sblab2.html#basic-spring-boot-project",
    "href": "springboot/sblab2.html#basic-spring-boot-project",
    "title": "Lab 2: Spring Boot Projects",
    "section": "(0) Basic Spring Boot project",
    "text": "(0) Basic Spring Boot project\n\n\nLibrary0\n\n\nPreliminary works:\n\nCreate project on Spring Init\nImages, step-by-step to create project\nLombok to make entities simplier\nJava-Faker to create entities\nBe careful with devtools!! You must go to settings and mark it, CTRL+ALT+S    on Advanced Settings: Allow Auto-make\nVery simple project: no database, @BookService with an ArrayList<Book> books where books are stored\n@RestController and @Controller to publish JSON data and an HTML web with Thymeleaf\n\nversion 1.0 : spring boot executions, api REST and web\nversion 2.0 : just some little modifications to explain what th: is"
  },
  {
    "objectID": "springboot/sblab2.html#api-rest-book-crud-with-postmanswagger",
    "href": "springboot/sblab2.html#api-rest-book-crud-with-postmanswagger",
    "title": "Lab 2: Spring Boot Projects",
    "section": "(1) API Rest Book CRUD with Postman/Swagger",
    "text": "(1) API Rest Book CRUD with Postman/Swagger\n\n\nLibrary1\n\n\nBase project:\n\nPOM\nAPI REST Read CRUD\nDataBase H2\nApplication.properties\nCommand Line Runner with methods to test\nPostman to test API REST, Postman web\n@Entity, @RestController, @Service, @CrudRepository JPA 2.0, @Component\n\n\nLibrary1 / Repo"
  },
  {
    "objectID": "springboot/sblab2.html#api-rest-author-book-onetomany-crud-with-swagger",
    "href": "springboot/sblab2.html#api-rest-author-book-onetomany-crud-with-swagger",
    "title": "Lab 2: Spring Boot Projects",
    "section": "(2) API Rest Author-Book @OneToMany CRUD with Swagger",
    "text": "(2) API Rest Author-Book @OneToMany CRUD with Swagger\n\n\nLibrary2\n\n\nBase project:\n\nLibrary1\nTwo entities related @OneToMany, that is, 1:n\n\n\nLibrary2 / Repo"
  },
  {
    "objectID": "springboot/sblab2.html#library-book-manytomany-and-onetoone-crud",
    "href": "springboot/sblab2.html#library-book-manytomany-and-onetoone-crud",
    "title": "Lab 2: Spring Boot Projects",
    "section": "(3) Library-Book @ManyToMany and @OneToOne CRUD",
    "text": "(3) Library-Book @ManyToMany and @OneToOne CRUD\n\n\nLibrary3\n\n\nBase project:\n\nLibrary2\nTwo/Three entities related @ManyToMany, that is, n:m and @OneToOne 1:1\n\n\nLibrary3 / Repo"
  },
  {
    "objectID": "springboot/sblab2.html#api-rest-library-book-author-manytomany-onetomany-crud-with-swagger-and-inherence",
    "href": "springboot/sblab2.html#api-rest-library-book-author-manytomany-onetomany-crud-with-swagger-and-inherence",
    "title": "Lab 2: Spring Boot Projects",
    "section": "(4) API Rest Library-Book-Author @ManyToMany @OneToMany CRUD with Swagger and Inherence",
    "text": "(4) API Rest Library-Book-Author @ManyToMany @OneToMany CRUD with Swagger and Inherence\n\n\nLibrary4\n\n\nBase project:\n\nLibrary2 and Library3\nInherence and Interficies\nAudit and JavaFaker\nJPQL\n\nBatch operations and Pagination"
  },
  {
    "objectID": "springboot/sblab2.html#thymeleaf-web-project",
    "href": "springboot/sblab2.html#thymeleaf-web-project",
    "title": "Lab 2: Spring Boot Projects",
    "section": "(5) ThymeLeaf Web Project",
    "text": "(5) ThymeLeaf Web Project\n\n\nLibrary5\n\n\nBase project:\n\nLibrary\nTemplates HTML Thymeleaf, Templates Engine\n@Controller instead of @RestController"
  },
  {
    "objectID": "springboot/sblab2.html#pagination-thymeleaf-rest-web-project",
    "href": "springboot/sblab2.html#pagination-thymeleaf-rest-web-project",
    "title": "Lab 2: Spring Boot Projects",
    "section": "(6) Pagination ThymeLeaf-Rest Web Project",
    "text": "(6) Pagination ThymeLeaf-Rest Web Project\n\n\nLibrary6\n\n\nBase project:\n\nLibrary\nTemplates HTML Thymeleaf, Templates Engine\n@RestController\nPagination and Sorting"
  },
  {
    "objectID": "springboot/sblab3.html",
    "href": "springboot/sblab3.html",
    "title": "Lab 3: Spring Boot Projects",
    "section": "",
    "text": "Welcome to the cifojava2022-5 wiki!"
  },
  {
    "objectID": "springboot/sblab3.html#s-6c-thymeleaf-web-project-resttemplate-data-from-api-rest",
    "href": "springboot/sblab3.html#s-6c-thymeleaf-web-project-resttemplate-data-from-api-rest",
    "title": "Lab 3: Spring Boot Projects",
    "section": "(6S-6C) ThymeLeaf Web Project RestTemplate (data from API Rest)",
    "text": "(6S-6C) ThymeLeaf Web Project RestTemplate (data from API Rest)\n\n\nLibrary6\n\n\nBase project:\n\nLibrary1 > Library6server\nlibrary5 > library6server\nTemplates html Thymeleaf\n@Controller and @RestController\n@Service: RestTemplate"
  },
  {
    "objectID": "springboot/sblab3.html#websockets-spring-boot-project-with-js-web-client-sockjs-stomp",
    "href": "springboot/sblab3.html#websockets-spring-boot-project-with-js-web-client-sockjs-stomp",
    "title": "Lab 3: Spring Boot Projects",
    "section": "(8) Websockets Spring Boot Project with JS Web-Client SockJS & Stomp",
    "text": "(8) Websockets Spring Boot Project with JS Web-Client SockJS & Stomp\n\n\nLibrary8\n\n\nBase project:\n\nLibrary3\nWebSocket\nSTOMP Web-Client JS"
  },
  {
    "objectID": "springboot/sblab3.html#graphql-spring-boot-project-with-playground",
    "href": "springboot/sblab3.html#graphql-spring-boot-project-with-playground",
    "title": "Lab 3: Spring Boot Projects",
    "section": "(9) GraphQL Spring Boot Project with PlayGround",
    "text": "(9) GraphQL Spring Boot Project with PlayGround\n\n\nLibrary9\n\n\nBase project:\n\nLibrary3\nGraphQL"
  },
  {
    "objectID": "springboot/sblab3.html#axios-js-spa-web-spring-boot-project",
    "href": "springboot/sblab3.html#axios-js-spa-web-spring-boot-project",
    "title": "Lab 3: Spring Boot Projects",
    "section": "(10) Axios JS SPA Web Spring Boot Project",
    "text": "(10) Axios JS SPA Web Spring Boot Project\n\n\nLibrary10\n\n\nBase project:\n\nLibrary5\nAxios JS\nSPA"
  },
  {
    "objectID": "springboot/sblab3.html#spring-boot-project-with-api-rest-mongodb",
    "href": "springboot/sblab3.html#spring-boot-project-with-api-rest-mongodb",
    "title": "Lab 3: Spring Boot Projects",
    "section": "(7) Spring Boot Project with API Rest MongoDB",
    "text": "(7) Spring Boot Project with API Rest MongoDB\n\n\nLibrary7\n\n\nBase project:\n\nLibrary3\nMongoCrud\n@RestController"
  },
  {
    "objectID": "springboot/sblab3.html#spring-boot-server-dynamodb-aws",
    "href": "springboot/sblab3.html#spring-boot-server-dynamodb-aws",
    "title": "Lab 3: Spring Boot Projects",
    "section": "(12) Spring Boot Server DynamoDB AWS",
    "text": "(12) Spring Boot Server DynamoDB AWS\n\n\nLibrary12\n\n\nBase project:\n\nLibrary5\nCloud DynamoDB AWS"
  },
  {
    "objectID": "springboot/sblab3.html#web-spring-boot-project-webflux",
    "href": "springboot/sblab3.html#web-spring-boot-project-webflux",
    "title": "Lab 3: Spring Boot Projects",
    "section": "(13-14) Web Spring Boot Project WebFlux",
    "text": "(13-14) Web Spring Boot Project WebFlux\n\n\nLibrary13-14\n\n\nBase project:\n\nLibrary5\nWebFlux"
  },
  {
    "objectID": "springboot/sblab3.html#web-spring-boot-project-thyemleaf-security",
    "href": "springboot/sblab3.html#web-spring-boot-project-thyemleaf-security",
    "title": "Lab 3: Spring Boot Projects",
    "section": "(11) Web Spring Boot Project Thyemleaf-Security",
    "text": "(11) Web Spring Boot Project Thyemleaf-Security\n\n\nLibrary11\n\n\nBase project:\n\nLibrary5\nSecurity"
  },
  {
    "objectID": "springboot/sblab3.html#webflux-project-video-streaming",
    "href": "springboot/sblab3.html#webflux-project-video-streaming",
    "title": "Lab 3: Spring Boot Projects",
    "section": "(15) WebFlux Project Video Streaming",
    "text": "(15) WebFlux Project Video Streaming\n\n\nLibrary15\n\n\nBase project:\n\nLibrary5\nVideo Streaming"
  },
  {
    "objectID": "springboot/sblab4.html",
    "href": "springboot/sblab4.html",
    "title": "Lab 4: Spring Boot Projects JPA Inherence strategies",
    "section": "",
    "text": "Welcome to the cifojava2022-6 wiki!"
  },
  {
    "objectID": "springboot/sblab4.html#entity-inhrence-jpa",
    "href": "springboot/sblab4.html#entity-inhrence-jpa",
    "title": "Lab 4: Spring Boot Projects JPA Inherence strategies",
    "section": "(0) @Entity Inhrence JPA",
    "text": "(0) @Entity Inhrence JPA\n\n\nJpaInherenceLibrary0\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book<> Auhtor\nDataBase H2: application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code inherence and JPA uses SINGLE_TABLE strategy by default\n  @Entity\n  public class Book {}\n\n\n  @Entity(name=\"BookItem\")\n  public class ItemBook extends Book {\n\n     @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n     @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n               joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n               inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n     private Set<Author>authors = new HashSet<Author>();\n  }\n\n\n  @Entity(name=\"RareItem\")\n  public class RareItem extends Book {}\n\n\n  @Entity(name=\"Author\")\n  @Table(name=\"AUTHOR_TABLE\")\n  public class Author {}\n\nVersions\n\nJpaInherenceLibrary v 1.1 : without @MappedSuperClass and @Entity superclass, Single Table strategy is applied BY DEFAULT"
  },
  {
    "objectID": "springboot/sblab4.html#mappedsuperclass-inhrence-jpa",
    "href": "springboot/sblab4.html#mappedsuperclass-inhrence-jpa",
    "title": "Lab 4: Spring Boot Projects JPA Inherence strategies",
    "section": "(1) MappedSuperclass Inhrence JPA",
    "text": "(1) MappedSuperclass Inhrence JPA\n\n\nJpaInherenceLibrary1\n\n\nBase project:\n\nPOM\n@Entity: ItemBook, RareBook and Auhtor\nNon-@Entity: Book\nDataBase H2: application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow can not we code @MappedSuperclass and @ManyToMany author\n  @MappedSuperclass\n  public abstract class Book {}\n\n\n  @Entity(name=\"BookItem\")\n  @Table(name=\"ITEM_BOOK_TABLE\")\n  public class ItemBook extends Book {\n\n     @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n     @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n                 joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n                 inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n     private Set<Author>authors = new HashSet<Author>();\n  }\n\n\n  @Entity(name=\"RareItem\")\n  @Table(name=\"RARE_ITEM_TABLE\")\n  public class RareItem extends Book {}\n\n\n  @Entity(name=\"Author\")\n  @Table(name=\"AUTHOR_TABLE\")\n  public class Author {}\nWith @MappedSuperclass any relationship can’t be done\n\n\n\nWith @MappedSuperclass\n\n\nWith @MappedSuperclass, one SuperClass and two SubClasses:\n\n\n\nWith @MappedSuperclass\n\n\n\nVersions\n\nJpaInherenceLibrary1 v 1.0 : not using author just inherence without relatonship @ManyToMany"
  },
  {
    "objectID": "springboot/sblab4.html#single-table-with-discriminator-inhrence-jpa",
    "href": "springboot/sblab4.html#single-table-with-discriminator-inhrence-jpa",
    "title": "Lab 4: Spring Boot Projects JPA Inherence strategies",
    "section": "(2) Single Table with Discriminator Inhrence JPA",
    "text": "(2) Single Table with Discriminator Inhrence JPA\n\n\nJpaInherenceLibrary2\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book<> Auhtor\nDataBase H2 : application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code @Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n   @Entity\n   @Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n   @DiscriminatorColumn(name=\"BOOK_TYPE\", \n         discriminatorType = DiscriminatorType.STRING)\n   public class Book {}\n\n\n  @Entity(name=\"BookItem\")\n  @Table(name=\"BOOK_ITEM_TABLE\")\n  @DiscriminatorValue(value= \"ITEMBOOK\")\n  public class BookItem extends Book {\n\n  @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n  @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n         joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n         inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n  private Set<Author>authors = new HashSet<Author>();}\n\n\n  @Entity(name=\"RareItem\")\n  @Table(name=\"RARE_ITEM_TABLE\")\n  @DiscriminatorValue(value= \"REAREBOOK\")\n  public class RareItem extends Book {}\n\n\n  @Entity(name=\"Author\")\n  @Table(name=\"AUTHOR_TABLE\")\n  public class Author {}\n\nWith @Inheritance and SINGLE_TABLE\n![@Inheritance ]( https://drive.google.com/uc?id=18nfiKnQaim4-lTD21iBwy313Daxtv73H)\n\nversion 1.1 : JpaInherenceLibrary2, SINGLE_TABLE strategy"
  },
  {
    "objectID": "springboot/sblab4.html#joined-table-inhrence-jpa",
    "href": "springboot/sblab4.html#joined-table-inhrence-jpa",
    "title": "Lab 4: Spring Boot Projects JPA Inherence strategies",
    "section": "(3) Joined Table Inhrence JPA",
    "text": "(3) Joined Table Inhrence JPA\n\n\nJpaInherenceLibrary3\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book<> Auhtor\nDataBase H2 : application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code @Inheritance(strategy = InheritanceType.JOINED)\n  @Entity\n  @Table(name=\"BOOK_TABLE\")\n  @Inheritance(strategy = InheritanceType.JOINED)\n  @DiscriminatorColumn(name=\"BOOK_TYPE\",\n         discriminatorType = DiscriminatorType.STRING)\n  public class Book {}\n\n\n  @Entity(name=\"BookItem\")\n  @Table(name=\"BOOK_ITEM_TABLE\")\n  @PrimaryKeyJoinColumn(name = \"bookItemId\")\n  @DiscriminatorValue(value= \"ITEMBOOK\")\n  public class BookItem extends Book {\n\n  @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n  @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n         joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n         inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n  private Set<Author>authors = new HashSet<Author>();}\n\n\n  @Entity(name=\"RareItem\")\n  @Table(name=\"RARE_ITEM_TABLE\")\n  @PrimaryKeyJoinColumn(name = \"rareItemId\")\n  @DiscriminatorValue(value= \"RAREBOOK\")\n  public class RareItem extends Book {}\n\n\n  @Entity(name=\"Author\")\n  @Table(name=\"AUTHOR_TABLE\")\n  public class Author {}\n\nWith @Inheritance and JOINED\n![@Inheritance JOINED](https://drive.google.com/uc?id=1BpxaW7fV_kh4PyFWn3i49nG4SqnKYpAE)\n\nverison 1.1 : JpaInherenceLibrary3"
  },
  {
    "objectID": "springboot/sblab4.html#table-per-class-inhrence-jpa",
    "href": "springboot/sblab4.html#table-per-class-inhrence-jpa",
    "title": "Lab 4: Spring Boot Projects JPA Inherence strategies",
    "section": "(4) Table per class Inhrence JPA",
    "text": "(4) Table per class Inhrence JPA\n\n\nJpaInherenceLibrary4\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book<> Auhtor\nDataBase H2 : application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n  @Entity\n  @Table(name=\"BOOK_TABLE\")\n  @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n  public class Book {}\n\n\n  @Entity(name=\"BookItem\")\n  @Table(name=\"BOOK_ITEM_TABLE\")\n  public class BookItem extends Book {\n\n  @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n  @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n       joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n       inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n  private Set<Author>authors = new HashSet<Author>();}\n\n\n  @Entity(name=\"RareItem\")\n  @Table(name=\"RARE_ITEM_TABLE\")\n  public class RareItem extends Book {}\n\n\n  @Entity(name=\"Author\")\n  @Table(name=\"AUTHOR_TABLE\")\n  public class Author {}\n\nWith @Inheritance and TABLE_PER_CLASS\n\n\n\n\n@Inheritance TABLE PER CLASS\n\n\nversion 1.1 : JpaInherenceLibrary4"
  },
  {
    "objectID": "springboot/sblab4.html#basic-spring-boot-project",
    "href": "springboot/sblab4.html#basic-spring-boot-project",
    "title": "Lab 4: Spring Boot Projects JPA Inherence strategies",
    "section": "(0) Basic Spring Boot project",
    "text": "(0) Basic Spring Boot project\n\n\nUniversal Planes\n\n\nPreliminary works:\n\nCreate project on Spring Init\n\nversion 1.0 : spring boot executions"
  },
  {
    "objectID": "springboot/sblab5.html",
    "href": "springboot/sblab5.html",
    "title": "Lab 5: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "springboot/springboot.html",
    "href": "springboot/springboot.html",
    "title": "Spring Boot",
    "section": "",
    "text": "Spring Boot\n\n\nSpring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.\nWe take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.\nIf you’re looking for information about a specific version, or instructions about how to upgrade from an earlier release, check out the project release notes section on our wiki.\n@SpringBootApplication\n@RestController\npublic class DemoApplication {\n\n@GetMapping(\"/helloworld\")\npublic String hello() {\n    return \"Hello World!\";\n}\n}"
  },
  {
    "objectID": "versioncontrol/versioncontrol.html",
    "href": "versioncontrol/versioncontrol.html",
    "title": "Version Control",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "vocabulary/vocabdatabase.html",
    "href": "vocabulary/vocabdatabase.html",
    "title": "DataBase Vocabulary",
    "section": "",
    "text": "about vocabulary"
  },
  {
    "objectID": "vocabulary/vocabdevops.html",
    "href": "vocabulary/vocabdevops.html",
    "title": "DevOps Vocabulary",
    "section": "",
    "text": "about vocabulary"
  },
  {
    "objectID": "vocabulary/vocabgeneral.html",
    "href": "vocabulary/vocabgeneral.html",
    "title": "General Vocabulary",
    "section": "",
    "text": "devops - framework - api - immuateble code - git - github - serverless - cd/ci - pipeline - container - docker image - docker container - microservices - ddd - script/declarative configuration file - throttle - parse - polling - webhook"
  },
  {
    "objectID": "vocabulary/vocabjava.html",
    "href": "vocabulary/vocabjava.html",
    "title": "Java SE Vocabulay",
    "section": "",
    "text": "java se - java design-patterns - java OOP - java object -\nComments: A multi-line comment begins with /and ends with/, and may span multiple lines. An end-of-line (single-line) comment begins with // and lasts till the end of the current line. Comments are NOT executable statements and are ignored by the compiler. But they provide useful explanation and documentation. I strongly suggest that you write comments liberally to explain your thought and logic.\nStatement: A programming statement performs a single piece of programming action. It is terminated by a semi-colon (;), just like an English sentence is ended with a period, as in Lines 6.\nBlock: A block is a group of programming statements enclosed by a pair of braces {}. This group of statements is treated as one single unit. There are two blocks in the above program. One contains the body of the class Hello. The other contains the body of the main() method. There is no need to put a semi-colon after the closing brace.\nWhitespaces: Blank, tab, and newline are collectively called whitespace. Extra whitespaces are ignored, i.e., only one whitespace is needed to separate the tokens. Nonetheless, extra whitespaces improve the readability, and I strongly suggest you use extra spaces and newlines to improve the readability of your code.\nCase Sensitivity: Java is case sensitive - a ROSE is NOT a Rose, and is NOT a rose. The filename, which is the same as the class name, is also case-sensitive."
  },
  {
    "objectID": "vocabulary/vocabreactjs.html",
    "href": "vocabulary/vocabreactjs.html",
    "title": "ReactJS Vocabulary",
    "section": "",
    "text": "about vocabulary"
  },
  {
    "objectID": "vocabulary/vocabscrum.html",
    "href": "vocabulary/vocabscrum.html",
    "title": "SCRUM Vocabulay",
    "section": "",
    "text": "to-do"
  },
  {
    "objectID": "vocabulary/vocabspringboot.html",
    "href": "vocabulary/vocabspringboot.html",
    "title": "Spring Boot Vocabulay",
    "section": "",
    "text": "to-do"
  },
  {
    "objectID": "vocabulary/vocabweb.html",
    "href": "vocabulary/vocabweb.html",
    "title": "Web Vocabulary",
    "section": "",
    "text": "about vocabulary"
  }
]